/*
 * generated by Xtext 2.26.0
 */
package dk.sdu.frhou18.mdsd.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import dk.sdu.frhou18.mdsd.ide.contentassist.antlr.internal.InternalIF22Parser;
import dk.sdu.frhou18.mdsd.services.IF22GrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class IF22Parser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(IF22GrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, IF22GrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getTargetTargetAccess().getAlternatives(), "rule__TargetTarget__Alternatives");
			builder.put(grammarAccess.getLogicExpAccess().getAlternatives_1_0(), "rule__LogicExp__Alternatives_1_0");
			builder.put(grammarAccess.getLogicAndORAccess().getAlternatives_1_0(), "rule__LogicAndOR__Alternatives_1_0");
			builder.put(grammarAccess.getMathExpAccess().getAlternatives_1_0(), "rule__MathExp__Alternatives_1_0");
			builder.put(grammarAccess.getMultDivMathExpAccess().getAlternatives_1_0(), "rule__MultDivMathExp__Alternatives_1_0");
			builder.put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getBooleanValueAccess().getAlternatives(), "rule__BooleanValue__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
			builder.put(grammarAccess.getFunctionAccess().getGroup_3(), "rule__Function__Group_3__0");
			builder.put(grammarAccess.getFunctionAccess().getGroup_3_1(), "rule__Function__Group_3_1__0");
			builder.put(grammarAccess.getStoryAccess().getGroup(), "rule__Story__Group__0");
			builder.put(grammarAccess.getScenarioAccess().getGroup(), "rule__Scenario__Group__0");
			builder.put(grammarAccess.getEndAccess().getGroup(), "rule__End__Group__0");
			builder.put(grammarAccess.getAnnounceAccess().getGroup(), "rule__Announce__Group__0");
			builder.put(grammarAccess.getQuestionAccess().getGroup(), "rule__Question__Group__0");
			builder.put(grammarAccess.getQuestionAccess().getGroup_5(), "rule__Question__Group_5__0");
			builder.put(grammarAccess.getVariableDefAccess().getGroup(), "rule__VariableDef__Group__0");
			builder.put(grammarAccess.getTargetAccess().getGroup(), "rule__Target__Group__0");
			builder.put(grammarAccess.getTargetAccess().getGroup_2(), "rule__Target__Group_2__0");
			builder.put(grammarAccess.getThisAccess().getGroup(), "rule__This__Group__0");
			builder.put(grammarAccess.getLogicExpAccess().getGroup(), "rule__LogicExp__Group__0");
			builder.put(grammarAccess.getLogicExpAccess().getGroup_1(), "rule__LogicExp__Group_1__0");
			builder.put(grammarAccess.getLogicExpAccess().getGroup_1_0_0(), "rule__LogicExp__Group_1_0_0__0");
			builder.put(grammarAccess.getLogicExpAccess().getGroup_1_0_1(), "rule__LogicExp__Group_1_0_1__0");
			builder.put(grammarAccess.getLogicExpAccess().getGroup_1_0_2(), "rule__LogicExp__Group_1_0_2__0");
			builder.put(grammarAccess.getLogicExpAccess().getGroup_1_0_3(), "rule__LogicExp__Group_1_0_3__0");
			builder.put(grammarAccess.getLogicExpAccess().getGroup_1_0_4(), "rule__LogicExp__Group_1_0_4__0");
			builder.put(grammarAccess.getLogicExpAccess().getGroup_1_0_5(), "rule__LogicExp__Group_1_0_5__0");
			builder.put(grammarAccess.getLogicAndORAccess().getGroup(), "rule__LogicAndOR__Group__0");
			builder.put(grammarAccess.getLogicAndORAccess().getGroup_1(), "rule__LogicAndOR__Group_1__0");
			builder.put(grammarAccess.getLogicAndORAccess().getGroup_1_0_0(), "rule__LogicAndOR__Group_1_0_0__0");
			builder.put(grammarAccess.getLogicAndORAccess().getGroup_1_0_1(), "rule__LogicAndOR__Group_1_0_1__0");
			builder.put(grammarAccess.getLogicNotAccess().getGroup(), "rule__LogicNot__Group__0");
			builder.put(grammarAccess.getParenthesesAccess().getGroup(), "rule__Parentheses__Group__0");
			builder.put(grammarAccess.getBooleanAccess().getGroup(), "rule__Boolean__Group__0");
			builder.put(grammarAccess.getMathExpAccess().getGroup(), "rule__MathExp__Group__0");
			builder.put(grammarAccess.getMathExpAccess().getGroup_1(), "rule__MathExp__Group_1__0");
			builder.put(grammarAccess.getMathExpAccess().getGroup_1_0_0(), "rule__MathExp__Group_1_0_0__0");
			builder.put(grammarAccess.getMathExpAccess().getGroup_1_0_1(), "rule__MathExp__Group_1_0_1__0");
			builder.put(grammarAccess.getMultDivMathExpAccess().getGroup(), "rule__MultDivMathExp__Group__0");
			builder.put(grammarAccess.getMultDivMathExpAccess().getGroup_1(), "rule__MultDivMathExp__Group_1__0");
			builder.put(grammarAccess.getMultDivMathExpAccess().getGroup_1_0_0(), "rule__MultDivMathExp__Group_1_0_0__0");
			builder.put(grammarAccess.getMultDivMathExpAccess().getGroup_1_0_1(), "rule__MultDivMathExp__Group_1_0_1__0");
			builder.put(grammarAccess.getMathNumberExpAccess().getGroup(), "rule__MathNumberExp__Group__0");
			builder.put(grammarAccess.getTextExpAccess().getGroup(), "rule__TextExp__Group__0");
			builder.put(grammarAccess.getTextExpAccess().getGroup_1(), "rule__TextExp__Group_1__0");
			builder.put(grammarAccess.getTextExpAccess().getGroup_1_0(), "rule__TextExp__Group_1_0__0");
			builder.put(grammarAccess.getFunctionUsageAccess().getGroup(), "rule__FunctionUsage__Group__0");
			builder.put(grammarAccess.getFunctionUsageAccess().getGroup_4(), "rule__FunctionUsage__Group_4__0");
			builder.put(grammarAccess.getTextLiteralAccess().getGroup(), "rule__TextLiteral__Group__0");
			builder.put(grammarAccess.getVarUseAccess().getGroup(), "rule__VarUse__Group__0");
			builder.put(grammarAccess.getTypeUsageAccess().getGroup(), "rule__TypeUsage__Group__0");
			builder.put(grammarAccess.getModelAccess().getStoryNameAssignment_0(), "rule__Model__StoryNameAssignment_0");
			builder.put(grammarAccess.getModelAccess().getFunctionsAssignment_1(), "rule__Model__FunctionsAssignment_1");
			builder.put(grammarAccess.getModelAccess().getScenariosAssignment_2(), "rule__Model__ScenariosAssignment_2");
			builder.put(grammarAccess.getFunctionAccess().getNameAssignment_1(), "rule__Function__NameAssignment_1");
			builder.put(grammarAccess.getFunctionAccess().getParametersAssignment_3_0(), "rule__Function__ParametersAssignment_3_0");
			builder.put(grammarAccess.getFunctionAccess().getParametersAssignment_3_1_1(), "rule__Function__ParametersAssignment_3_1_1");
			builder.put(grammarAccess.getFunctionAccess().getTypeAssignment_6(), "rule__Function__TypeAssignment_6");
			builder.put(grammarAccess.getStoryAccess().getNameAssignment_1(), "rule__Story__NameAssignment_1");
			builder.put(grammarAccess.getScenarioAccess().getNameAssignment_1(), "rule__Scenario__NameAssignment_1");
			builder.put(grammarAccess.getScenarioAccess().getVariablesAssignment_3(), "rule__Scenario__VariablesAssignment_3");
			builder.put(grammarAccess.getScenarioAccess().getStatemensAssignment_4(), "rule__Scenario__StatemensAssignment_4");
			builder.put(grammarAccess.getEndAccess().getNameAssignment_1(), "rule__End__NameAssignment_1");
			builder.put(grammarAccess.getEndAccess().getEndMessageAssignment_2(), "rule__End__EndMessageAssignment_2");
			builder.put(grammarAccess.getAnnounceAccess().getNameAssignment_1(), "rule__Announce__NameAssignment_1");
			builder.put(grammarAccess.getAnnounceAccess().getTextAssignment_2(), "rule__Announce__TextAssignment_2");
			builder.put(grammarAccess.getAnnounceAccess().getTargetAssignment_3(), "rule__Announce__TargetAssignment_3");
			builder.put(grammarAccess.getQuestionAccess().getNameAssignment_1(), "rule__Question__NameAssignment_1");
			builder.put(grammarAccess.getQuestionAccess().getTextAssignment_2(), "rule__Question__TextAssignment_2");
			builder.put(grammarAccess.getQuestionAccess().getAsValueAssignment_4(), "rule__Question__AsValueAssignment_4");
			builder.put(grammarAccess.getQuestionAccess().getInVarAssignment_5_1(), "rule__Question__InVarAssignment_5_1");
			builder.put(grammarAccess.getQuestionAccess().getTargetsAssignment_6(), "rule__Question__TargetsAssignment_6");
			builder.put(grammarAccess.getVariableDefAccess().getNameAssignment_1(), "rule__VariableDef__NameAssignment_1");
			builder.put(grammarAccess.getVariableDefAccess().getTypeAssignment_3(), "rule__VariableDef__TypeAssignment_3");
			builder.put(grammarAccess.getTargetAccess().getTargetAssignment_1(), "rule__Target__TargetAssignment_1");
			builder.put(grammarAccess.getTargetAccess().getLogicAssignment_2_1(), "rule__Target__LogicAssignment_2_1");
			builder.put(grammarAccess.getLogicExpAccess().getRightAssignment_1_1(), "rule__LogicExp__RightAssignment_1_1");
			builder.put(grammarAccess.getLogicAndORAccess().getRightAssignment_1_1(), "rule__LogicAndOR__RightAssignment_1_1");
			builder.put(grammarAccess.getLogicNotAccess().getRefAssignment_2(), "rule__LogicNot__RefAssignment_2");
			builder.put(grammarAccess.getParenthesesAccess().getRefAssignment_2(), "rule__Parentheses__RefAssignment_2");
			builder.put(grammarAccess.getBooleanAccess().getValAssignment_1(), "rule__Boolean__ValAssignment_1");
			builder.put(grammarAccess.getMathExpAccess().getRightAssignment_1_1(), "rule__MathExp__RightAssignment_1_1");
			builder.put(grammarAccess.getMultDivMathExpAccess().getRightAssignment_1_1(), "rule__MultDivMathExp__RightAssignment_1_1");
			builder.put(grammarAccess.getMathNumberExpAccess().getValueAssignment_1(), "rule__MathNumberExp__ValueAssignment_1");
			builder.put(grammarAccess.getTextExpAccess().getRightAssignment_1_1(), "rule__TextExp__RightAssignment_1_1");
			builder.put(grammarAccess.getFunctionUsageAccess().getNameAssignment_1(), "rule__FunctionUsage__NameAssignment_1");
			builder.put(grammarAccess.getFunctionUsageAccess().getExpsAssignment_3(), "rule__FunctionUsage__ExpsAssignment_3");
			builder.put(grammarAccess.getFunctionUsageAccess().getExpsAssignment_4_1(), "rule__FunctionUsage__ExpsAssignment_4_1");
			builder.put(grammarAccess.getTextLiteralAccess().getTextAssignment_1(), "rule__TextLiteral__TextAssignment_1");
			builder.put(grammarAccess.getVarUseAccess().getRefAssignment_1(), "rule__VarUse__RefAssignment_1");
			builder.put(grammarAccess.getTypeUsageAccess().getTypeAssignment_1(), "rule__TypeUsage__TypeAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private IF22GrammarAccess grammarAccess;

	@Override
	protected InternalIF22Parser createParser() {
		InternalIF22Parser result = new InternalIF22Parser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public IF22GrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(IF22GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
