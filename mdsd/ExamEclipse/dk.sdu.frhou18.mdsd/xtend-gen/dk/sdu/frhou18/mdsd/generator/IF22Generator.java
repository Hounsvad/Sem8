/**
 * generated by Xtext 2.26.0
 */
package dk.sdu.frhou18.mdsd.generator;

import com.google.common.collect.Iterators;
import dk.sdu.frhou18.mdsd.generator.subgenerators.ExternalGenerator;
import dk.sdu.frhou18.mdsd.generator.subgenerators.GameGenerator;
import dk.sdu.frhou18.mdsd.generator.subgenerators.ScenarioGenerator;
import dk.sdu.frhou18.mdsd.iF22.Model;
import dk.sdu.frhou18.mdsd.iF22.Scenario;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class IF22Generator extends AbstractGenerator {
  private String pkg = "interactive_fiction";
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final Model model = Iterators.<Model>filter(resource.getAllContents(), Model.class).next();
    final String storyName = model.getStoryName().getName();
    final EList<Scenario> scenarios = model.getScenarios();
    GameGenerator.doGenerate(fsa, this.pkg, model, storyName, scenarios);
    int _length = ((Object[])Conversions.unwrapArray(model.getFunctions(), Object.class)).length;
    boolean _greaterThan = (_length > 0);
    if (_greaterThan) {
      ExternalGenerator.doGenerate(fsa, this.pkg, model, storyName, scenarios);
    }
    for (final Scenario scenario : scenarios) {
      ScenarioGenerator.doGenerate(fsa, this.pkg, model, storyName, scenario);
    }
  }
  
  public static String snakeCase(final String input) {
    return IterableExtensions.join(((Iterable<?>)Conversions.doWrapArray(input.split("(?=\\p{Upper})"))), "_").toLowerCase();
  }
}
