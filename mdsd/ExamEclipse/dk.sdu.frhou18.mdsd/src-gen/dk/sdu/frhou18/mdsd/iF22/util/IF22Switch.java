/**
 * generated by Xtext 2.26.0
 */
package dk.sdu.frhou18.mdsd.iF22.util;

import dk.sdu.frhou18.mdsd.iF22.And;
import dk.sdu.frhou18.mdsd.iF22.Announce;
import dk.sdu.frhou18.mdsd.iF22.Division;
import dk.sdu.frhou18.mdsd.iF22.End;
import dk.sdu.frhou18.mdsd.iF22.Equals;
import dk.sdu.frhou18.mdsd.iF22.Expression;
import dk.sdu.frhou18.mdsd.iF22.Function;
import dk.sdu.frhou18.mdsd.iF22.FunctionUsage;
import dk.sdu.frhou18.mdsd.iF22.Greater;
import dk.sdu.frhou18.mdsd.iF22.GreaterOrEquals;
import dk.sdu.frhou18.mdsd.iF22.IF22Package;
import dk.sdu.frhou18.mdsd.iF22.Less;
import dk.sdu.frhou18.mdsd.iF22.LessOrEquals;
import dk.sdu.frhou18.mdsd.iF22.LogicNot;
import dk.sdu.frhou18.mdsd.iF22.MathNumberExp;
import dk.sdu.frhou18.mdsd.iF22.Minus;
import dk.sdu.frhou18.mdsd.iF22.Model;
import dk.sdu.frhou18.mdsd.iF22.Multiplication;
import dk.sdu.frhou18.mdsd.iF22.NotEquals;
import dk.sdu.frhou18.mdsd.iF22.Or;
import dk.sdu.frhou18.mdsd.iF22.Parentheses;
import dk.sdu.frhou18.mdsd.iF22.Plus;
import dk.sdu.frhou18.mdsd.iF22.Question;
import dk.sdu.frhou18.mdsd.iF22.Scenario;
import dk.sdu.frhou18.mdsd.iF22.Statement;
import dk.sdu.frhou18.mdsd.iF22.Story;
import dk.sdu.frhou18.mdsd.iF22.StringProducer;
import dk.sdu.frhou18.mdsd.iF22.Target;
import dk.sdu.frhou18.mdsd.iF22.TargetTarget;
import dk.sdu.frhou18.mdsd.iF22.TextExp;
import dk.sdu.frhou18.mdsd.iF22.TextLiteral;
import dk.sdu.frhou18.mdsd.iF22.This;
import dk.sdu.frhou18.mdsd.iF22.TypeUsage;
import dk.sdu.frhou18.mdsd.iF22.VarUse;
import dk.sdu.frhou18.mdsd.iF22.VariableDef;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see dk.sdu.frhou18.mdsd.iF22.IF22Package
 * @generated
 */
public class IF22Switch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static IF22Package modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IF22Switch()
  {
    if (modelPackage == null)
    {
      modelPackage = IF22Package.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case IF22Package.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IF22Package.FUNCTION:
      {
        Function function = (Function)theEObject;
        T result = caseFunction(function);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IF22Package.STORY:
      {
        Story story = (Story)theEObject;
        T result = caseStory(story);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IF22Package.SCENARIO:
      {
        Scenario scenario = (Scenario)theEObject;
        T result = caseScenario(scenario);
        if (result == null) result = caseTargetTarget(scenario);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IF22Package.STATEMENT:
      {
        Statement statement = (Statement)theEObject;
        T result = caseStatement(statement);
        if (result == null) result = caseTargetTarget(statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IF22Package.END:
      {
        End end = (End)theEObject;
        T result = caseEnd(end);
        if (result == null) result = caseStatement(end);
        if (result == null) result = caseTargetTarget(end);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IF22Package.ANNOUNCE:
      {
        Announce announce = (Announce)theEObject;
        T result = caseAnnounce(announce);
        if (result == null) result = caseStatement(announce);
        if (result == null) result = caseTargetTarget(announce);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IF22Package.QUESTION:
      {
        Question question = (Question)theEObject;
        T result = caseQuestion(question);
        if (result == null) result = caseStatement(question);
        if (result == null) result = caseTargetTarget(question);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IF22Package.VARIABLE_DEF:
      {
        VariableDef variableDef = (VariableDef)theEObject;
        T result = caseVariableDef(variableDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IF22Package.TARGET:
      {
        Target target = (Target)theEObject;
        T result = caseTarget(target);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IF22Package.TARGET_TARGET:
      {
        TargetTarget targetTarget = (TargetTarget)theEObject;
        T result = caseTargetTarget(targetTarget);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IF22Package.STRING_PRODUCER:
      {
        StringProducer stringProducer = (StringProducer)theEObject;
        T result = caseStringProducer(stringProducer);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IF22Package.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = caseStringProducer(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IF22Package.THIS:
      {
        This this_ = (This)theEObject;
        T result = caseThis(this_);
        if (result == null) result = caseExpression(this_);
        if (result == null) result = caseStringProducer(this_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IF22Package.EQUALS:
      {
        Equals equals = (Equals)theEObject;
        T result = caseEquals(equals);
        if (result == null) result = caseExpression(equals);
        if (result == null) result = caseStringProducer(equals);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IF22Package.NOT_EQUALS:
      {
        NotEquals notEquals = (NotEquals)theEObject;
        T result = caseNotEquals(notEquals);
        if (result == null) result = caseExpression(notEquals);
        if (result == null) result = caseStringProducer(notEquals);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IF22Package.LESS:
      {
        Less less = (Less)theEObject;
        T result = caseLess(less);
        if (result == null) result = caseExpression(less);
        if (result == null) result = caseStringProducer(less);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IF22Package.GREATER:
      {
        Greater greater = (Greater)theEObject;
        T result = caseGreater(greater);
        if (result == null) result = caseExpression(greater);
        if (result == null) result = caseStringProducer(greater);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IF22Package.LESS_OR_EQUALS:
      {
        LessOrEquals lessOrEquals = (LessOrEquals)theEObject;
        T result = caseLessOrEquals(lessOrEquals);
        if (result == null) result = caseExpression(lessOrEquals);
        if (result == null) result = caseStringProducer(lessOrEquals);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IF22Package.GREATER_OR_EQUALS:
      {
        GreaterOrEquals greaterOrEquals = (GreaterOrEquals)theEObject;
        T result = caseGreaterOrEquals(greaterOrEquals);
        if (result == null) result = caseExpression(greaterOrEquals);
        if (result == null) result = caseStringProducer(greaterOrEquals);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IF22Package.AND:
      {
        And and = (And)theEObject;
        T result = caseAnd(and);
        if (result == null) result = caseExpression(and);
        if (result == null) result = caseStringProducer(and);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IF22Package.OR:
      {
        Or or = (Or)theEObject;
        T result = caseOr(or);
        if (result == null) result = caseExpression(or);
        if (result == null) result = caseStringProducer(or);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IF22Package.LOGIC_NOT:
      {
        LogicNot logicNot = (LogicNot)theEObject;
        T result = caseLogicNot(logicNot);
        if (result == null) result = caseExpression(logicNot);
        if (result == null) result = caseStringProducer(logicNot);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IF22Package.PARENTHESES:
      {
        Parentheses parentheses = (Parentheses)theEObject;
        T result = caseParentheses(parentheses);
        if (result == null) result = caseExpression(parentheses);
        if (result == null) result = caseStringProducer(parentheses);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IF22Package.BOOLEAN:
      {
        dk.sdu.frhou18.mdsd.iF22.Boolean boolean_ = (dk.sdu.frhou18.mdsd.iF22.Boolean)theEObject;
        T result = caseBoolean(boolean_);
        if (result == null) result = caseExpression(boolean_);
        if (result == null) result = caseStringProducer(boolean_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IF22Package.PLUS:
      {
        Plus plus = (Plus)theEObject;
        T result = casePlus(plus);
        if (result == null) result = caseExpression(plus);
        if (result == null) result = caseStringProducer(plus);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IF22Package.MINUS:
      {
        Minus minus = (Minus)theEObject;
        T result = caseMinus(minus);
        if (result == null) result = caseExpression(minus);
        if (result == null) result = caseStringProducer(minus);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IF22Package.MULTIPLICATION:
      {
        Multiplication multiplication = (Multiplication)theEObject;
        T result = caseMultiplication(multiplication);
        if (result == null) result = caseExpression(multiplication);
        if (result == null) result = caseStringProducer(multiplication);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IF22Package.DIVISION:
      {
        Division division = (Division)theEObject;
        T result = caseDivision(division);
        if (result == null) result = caseExpression(division);
        if (result == null) result = caseStringProducer(division);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IF22Package.MATH_NUMBER_EXP:
      {
        MathNumberExp mathNumberExp = (MathNumberExp)theEObject;
        T result = caseMathNumberExp(mathNumberExp);
        if (result == null) result = caseExpression(mathNumberExp);
        if (result == null) result = caseStringProducer(mathNumberExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IF22Package.TEXT_EXP:
      {
        TextExp textExp = (TextExp)theEObject;
        T result = caseTextExp(textExp);
        if (result == null) result = caseExpression(textExp);
        if (result == null) result = caseStringProducer(textExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IF22Package.FUNCTION_USAGE:
      {
        FunctionUsage functionUsage = (FunctionUsage)theEObject;
        T result = caseFunctionUsage(functionUsage);
        if (result == null) result = caseExpression(functionUsage);
        if (result == null) result = caseStringProducer(functionUsage);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IF22Package.TEXT_LITERAL:
      {
        TextLiteral textLiteral = (TextLiteral)theEObject;
        T result = caseTextLiteral(textLiteral);
        if (result == null) result = caseExpression(textLiteral);
        if (result == null) result = caseStringProducer(textLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IF22Package.VAR_USE:
      {
        VarUse varUse = (VarUse)theEObject;
        T result = caseVarUse(varUse);
        if (result == null) result = caseExpression(varUse);
        if (result == null) result = caseStringProducer(varUse);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case IF22Package.TYPE_USAGE:
      {
        TypeUsage typeUsage = (TypeUsage)theEObject;
        T result = caseTypeUsage(typeUsage);
        if (result == null) result = caseExpression(typeUsage);
        if (result == null) result = caseStringProducer(typeUsage);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunction(Function object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Story</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Story</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStory(Story object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Scenario</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Scenario</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseScenario(Scenario object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatement(Statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>End</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>End</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnd(End object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Announce</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Announce</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnnounce(Announce object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Question</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Question</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQuestion(Question object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableDef(VariableDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Target</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Target</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTarget(Target object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Target Target</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Target Target</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTargetTarget(TargetTarget object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Producer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Producer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringProducer(StringProducer object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>This</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>This</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseThis(This object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Equals</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Equals</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEquals(Equals object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Not Equals</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Not Equals</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNotEquals(NotEquals object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Less</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Less</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLess(Less object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Greater</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Greater</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGreater(Greater object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Less Or Equals</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Less Or Equals</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLessOrEquals(LessOrEquals object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Greater Or Equals</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Greater Or Equals</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGreaterOrEquals(GreaterOrEquals object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>And</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>And</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnd(And object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Or</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Or</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOr(Or object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logic Not</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logic Not</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicNot(LogicNot object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parentheses</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parentheses</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParentheses(Parentheses object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBoolean(dk.sdu.frhou18.mdsd.iF22.Boolean object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Plus</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Plus</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlus(Plus object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Minus</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Minus</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMinus(Minus object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Multiplication</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Multiplication</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMultiplication(Multiplication object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Division</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Division</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDivision(Division object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Math Number Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Math Number Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMathNumberExp(MathNumberExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Text Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Text Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTextExp(TextExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Usage</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Usage</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionUsage(FunctionUsage object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Text Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Text Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTextLiteral(TextLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Use</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Use</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarUse(VarUse object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Usage</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Usage</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeUsage(TypeUsage object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //IF22Switch
