/*
 * generated by Xtext 2.26.0
 */
package dk.sdu.frhou18.mdsd.validation

import dk.sdu.frhou18.mdsd.iF22.Function
import org.eclipse.xtext.validation.Check
import dk.sdu.frhou18.mdsd.iF22.Model
import org.eclipse.xtext.EcoreUtil2
import dk.sdu.frhou18.mdsd.iF22.IF22Package
import dk.sdu.frhou18.mdsd.iF22.Statement
import dk.sdu.frhou18.mdsd.iF22.Scenario
import dk.sdu.frhou18.mdsd.iF22.End

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class IF22Validator extends AbstractIF22Validator {
	
//	public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					IF22Package.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
	
	public static val DUPLICATE_NAME = 'duplicateName'
	
	@Check
	def checkFunctionNameNotDuplicate(Function function){
		var base = EcoreUtil2.getContainerOfType(function, Model)
		if(base.functions.filter[f|f !== function && f.name == function.name].toList.size > 0){
			error('Functions are not allowed to have the same name', IF22Package.Literals.FUNCTION__NAME, DUPLICATE_NAME)
		}
	}
	
	public static val AT_LEAST_ONE_END = 'atLeastOneEnd'
	
	@Check
	def atLeastOneEndStatement(Scenario sc){
		if(sc.statemens.filter[st|st instanceof End].toList.size == 0){
			error('A scenario should have at least one end statement', IF22Package.Literals.SCENARIO__STATEMENS, AT_LEAST_ONE_END)
		}
	}
	
}
