/**
 * generated by Xtext 2.26.0
 */
package dk.sdu.frhou18.mdsd.iF22.impl;

import dk.sdu.frhou18.mdsd.iF22.Expression;
import dk.sdu.frhou18.mdsd.iF22.IF22Package;
import dk.sdu.frhou18.mdsd.iF22.Question;
import dk.sdu.frhou18.mdsd.iF22.Target;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Question</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link dk.sdu.frhou18.mdsd.iF22.impl.QuestionImpl#getText <em>Text</em>}</li>
 *   <li>{@link dk.sdu.frhou18.mdsd.iF22.impl.QuestionImpl#getAsValue <em>As Value</em>}</li>
 *   <li>{@link dk.sdu.frhou18.mdsd.iF22.impl.QuestionImpl#getInVar <em>In Var</em>}</li>
 *   <li>{@link dk.sdu.frhou18.mdsd.iF22.impl.QuestionImpl#getTargets <em>Targets</em>}</li>
 * </ul>
 *
 * @generated
 */
public class QuestionImpl extends StatementImpl implements Question
{
  /**
   * The cached value of the '{@link #getText() <em>Text</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getText()
   * @generated
   * @ordered
   */
  protected Expression text;

  /**
   * The cached value of the '{@link #getAsValue() <em>As Value</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAsValue()
   * @generated
   * @ordered
   */
  protected Expression asValue;

  /**
   * The cached value of the '{@link #getInVar() <em>In Var</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInVar()
   * @generated
   * @ordered
   */
  protected Expression inVar;

  /**
   * The cached value of the '{@link #getTargets() <em>Targets</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTargets()
   * @generated
   * @ordered
   */
  protected EList<Target> targets;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected QuestionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return IF22Package.Literals.QUESTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getText()
  {
    return text;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetText(Expression newText, NotificationChain msgs)
  {
    Expression oldText = text;
    text = newText;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, IF22Package.QUESTION__TEXT, oldText, newText);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setText(Expression newText)
  {
    if (newText != text)
    {
      NotificationChain msgs = null;
      if (text != null)
        msgs = ((InternalEObject)text).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - IF22Package.QUESTION__TEXT, null, msgs);
      if (newText != null)
        msgs = ((InternalEObject)newText).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - IF22Package.QUESTION__TEXT, null, msgs);
      msgs = basicSetText(newText, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IF22Package.QUESTION__TEXT, newText, newText));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getAsValue()
  {
    return asValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAsValue(Expression newAsValue, NotificationChain msgs)
  {
    Expression oldAsValue = asValue;
    asValue = newAsValue;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, IF22Package.QUESTION__AS_VALUE, oldAsValue, newAsValue);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAsValue(Expression newAsValue)
  {
    if (newAsValue != asValue)
    {
      NotificationChain msgs = null;
      if (asValue != null)
        msgs = ((InternalEObject)asValue).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - IF22Package.QUESTION__AS_VALUE, null, msgs);
      if (newAsValue != null)
        msgs = ((InternalEObject)newAsValue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - IF22Package.QUESTION__AS_VALUE, null, msgs);
      msgs = basicSetAsValue(newAsValue, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IF22Package.QUESTION__AS_VALUE, newAsValue, newAsValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getInVar()
  {
    return inVar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInVar(Expression newInVar, NotificationChain msgs)
  {
    Expression oldInVar = inVar;
    inVar = newInVar;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, IF22Package.QUESTION__IN_VAR, oldInVar, newInVar);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInVar(Expression newInVar)
  {
    if (newInVar != inVar)
    {
      NotificationChain msgs = null;
      if (inVar != null)
        msgs = ((InternalEObject)inVar).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - IF22Package.QUESTION__IN_VAR, null, msgs);
      if (newInVar != null)
        msgs = ((InternalEObject)newInVar).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - IF22Package.QUESTION__IN_VAR, null, msgs);
      msgs = basicSetInVar(newInVar, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IF22Package.QUESTION__IN_VAR, newInVar, newInVar));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Target> getTargets()
  {
    if (targets == null)
    {
      targets = new EObjectContainmentEList<Target>(Target.class, this, IF22Package.QUESTION__TARGETS);
    }
    return targets;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case IF22Package.QUESTION__TEXT:
        return basicSetText(null, msgs);
      case IF22Package.QUESTION__AS_VALUE:
        return basicSetAsValue(null, msgs);
      case IF22Package.QUESTION__IN_VAR:
        return basicSetInVar(null, msgs);
      case IF22Package.QUESTION__TARGETS:
        return ((InternalEList<?>)getTargets()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case IF22Package.QUESTION__TEXT:
        return getText();
      case IF22Package.QUESTION__AS_VALUE:
        return getAsValue();
      case IF22Package.QUESTION__IN_VAR:
        return getInVar();
      case IF22Package.QUESTION__TARGETS:
        return getTargets();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case IF22Package.QUESTION__TEXT:
        setText((Expression)newValue);
        return;
      case IF22Package.QUESTION__AS_VALUE:
        setAsValue((Expression)newValue);
        return;
      case IF22Package.QUESTION__IN_VAR:
        setInVar((Expression)newValue);
        return;
      case IF22Package.QUESTION__TARGETS:
        getTargets().clear();
        getTargets().addAll((Collection<? extends Target>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case IF22Package.QUESTION__TEXT:
        setText((Expression)null);
        return;
      case IF22Package.QUESTION__AS_VALUE:
        setAsValue((Expression)null);
        return;
      case IF22Package.QUESTION__IN_VAR:
        setInVar((Expression)null);
        return;
      case IF22Package.QUESTION__TARGETS:
        getTargets().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case IF22Package.QUESTION__TEXT:
        return text != null;
      case IF22Package.QUESTION__AS_VALUE:
        return asValue != null;
      case IF22Package.QUESTION__IN_VAR:
        return inVar != null;
      case IF22Package.QUESTION__TARGETS:
        return targets != null && !targets.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //QuestionImpl
