/*
 * generated by Xtext 2.26.0
 */
grammar InternalIF22;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package dk.sdu.frhou18.mdsd.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package dk.sdu.frhou18.mdsd.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import dk.sdu.frhou18.mdsd.services.IF22GrammarAccess;

}

@parser::members {

 	private IF22GrammarAccess grammarAccess;

    public InternalIF22Parser(TokenStream input, IF22GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected IF22GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getStoryNameStoryParserRuleCall_0_0());
				}
				lv_storyName_0_0=ruleStory
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"storyName",
						lv_storyName_0_0,
						"dk.sdu.frhou18.mdsd.IF22.Story");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getFunctionsFunctionParserRuleCall_1_0());
				}
				lv_functions_1_0=ruleFunction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"functions",
						lv_functions_1_0,
						"dk.sdu.frhou18.mdsd.IF22.Function");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getScenariosScenarioParserRuleCall_2_0());
				}
				lv_scenarios_2_0=ruleScenario
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"scenarios",
						lv_scenarios_2_0,
						"dk.sdu.frhou18.mdsd.IF22.Scenario");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_ruleFunction=ruleFunction
	{ $current=$iv_ruleFunction.current; }
	EOF;

// Rule Function
ruleFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='function'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionAccess().getFunctionKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionAccess().getParametersTypeUsageParserRuleCall_3_0_0());
					}
					lv_parameters_3_0=ruleTypeUsage
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_3_0,
							"dk.sdu.frhou18.mdsd.IF22.TypeUsage");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getFunctionAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFunctionAccess().getParametersTypeUsageParserRuleCall_3_1_1_0());
						}
						lv_parameters_5_0=ruleTypeUsage
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFunctionRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_5_0,
								"dk.sdu.frhou18.mdsd.IF22.TypeUsage");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getFunctionAccess().getRightParenthesisKeyword_4());
		}
		otherlv_7=':'
		{
			newLeafNode(otherlv_7, grammarAccess.getFunctionAccess().getColonKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionAccess().getTypeTypeEnumRuleCall_6_0());
				}
				lv_type_8_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionRule());
					}
					set(
						$current,
						"type",
						lv_type_8_0,
						"dk.sdu.frhou18.mdsd.IF22.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStory
entryRuleStory returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStoryRule()); }
	iv_ruleStory=ruleStory
	{ $current=$iv_ruleStory.current; }
	EOF;

// Rule Story
ruleStory returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='story'
		{
			newLeafNode(otherlv_0, grammarAccess.getStoryAccess().getStoryKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getStoryAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStoryRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleScenario
entryRuleScenario returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScenarioRule()); }
	iv_ruleScenario=ruleScenario
	{ $current=$iv_ruleScenario.current; }
	EOF;

// Rule Scenario
ruleScenario returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='scenario'
		{
			newLeafNode(otherlv_0, grammarAccess.getScenarioAccess().getScenarioKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getScenarioAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getScenarioRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getScenarioAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getScenarioAccess().getVariablesVariableDefParserRuleCall_3_0());
				}
				lv_variables_3_0=ruleVariableDef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScenarioRule());
					}
					add(
						$current,
						"variables",
						lv_variables_3_0,
						"dk.sdu.frhou18.mdsd.IF22.VariableDef");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getScenarioAccess().getStatemensStatementParserRuleCall_4_0());
				}
				lv_statemens_4_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScenarioRule());
					}
					add(
						$current,
						"statemens",
						lv_statemens_4_0,
						"dk.sdu.frhou18.mdsd.IF22.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getScenarioAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getEndParserRuleCall_0());
		}
		this_End_0=ruleEnd
		{
			$current = $this_End_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getAnnounceParserRuleCall_1());
		}
		this_Announce_1=ruleAnnounce
		{
			$current = $this_Announce_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getQuestionParserRuleCall_2());
		}
		this_Question_2=ruleQuestion
		{
			$current = $this_Question_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEnd
entryRuleEnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEndRule()); }
	iv_ruleEnd=ruleEnd
	{ $current=$iv_ruleEnd.current; }
	EOF;

// Rule End
ruleEnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='end'
		{
			newLeafNode(otherlv_0, grammarAccess.getEndAccess().getEndKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getEndAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEndRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEndAccess().getEndMessageLogicExpParserRuleCall_2_0());
				}
				lv_endMessage_2_0=ruleLogicExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEndRule());
					}
					set(
						$current,
						"endMessage",
						lv_endMessage_2_0,
						"dk.sdu.frhou18.mdsd.IF22.LogicExp");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAnnounce
entryRuleAnnounce returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnnounceRule()); }
	iv_ruleAnnounce=ruleAnnounce
	{ $current=$iv_ruleAnnounce.current; }
	EOF;

// Rule Announce
ruleAnnounce returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='announce'
		{
			newLeafNode(otherlv_0, grammarAccess.getAnnounceAccess().getAnnounceKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAnnounceAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAnnounceRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAnnounceAccess().getTextLogicExpParserRuleCall_2_0());
				}
				lv_text_2_0=ruleLogicExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnnounceRule());
					}
					set(
						$current,
						"text",
						lv_text_2_0,
						"dk.sdu.frhou18.mdsd.IF22.LogicExp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAnnounceAccess().getTargetTargetParserRuleCall_3_0());
				}
				lv_target_3_0=ruleTarget
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnnounceRule());
					}
					set(
						$current,
						"target",
						lv_target_3_0,
						"dk.sdu.frhou18.mdsd.IF22.Target");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleQuestion
entryRuleQuestion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQuestionRule()); }
	iv_ruleQuestion=ruleQuestion
	{ $current=$iv_ruleQuestion.current; }
	EOF;

// Rule Question
ruleQuestion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='question'
		{
			newLeafNode(otherlv_0, grammarAccess.getQuestionAccess().getQuestionKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getQuestionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getQuestionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getQuestionAccess().getTextLogicExpParserRuleCall_2_0());
				}
				lv_text_2_0=ruleLogicExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuestionRule());
					}
					set(
						$current,
						"text",
						lv_text_2_0,
						"dk.sdu.frhou18.mdsd.IF22.LogicExp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='as'
		{
			newLeafNode(otherlv_3, grammarAccess.getQuestionAccess().getAsKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getQuestionAccess().getAsValueLogicExpParserRuleCall_4_0());
				}
				lv_asValue_4_0=ruleLogicExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuestionRule());
					}
					set(
						$current,
						"asValue",
						lv_asValue_4_0,
						"dk.sdu.frhou18.mdsd.IF22.LogicExp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5='in'
			{
				newLeafNode(otherlv_5, grammarAccess.getQuestionAccess().getInKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getQuestionAccess().getInVarVarUseParserRuleCall_5_1_0());
					}
					lv_inVar_6_0=ruleVarUse
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getQuestionRule());
						}
						set(
							$current,
							"inVar",
							lv_inVar_6_0,
							"dk.sdu.frhou18.mdsd.IF22.VarUse");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getQuestionAccess().getTargetsTargetParserRuleCall_6_0());
				}
				lv_targets_7_0=ruleTarget
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuestionRule());
					}
					add(
						$current,
						"targets",
						lv_targets_7_0,
						"dk.sdu.frhou18.mdsd.IF22.Target");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleVariableDef
entryRuleVariableDef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDefRule()); }
	iv_ruleVariableDef=ruleVariableDef
	{ $current=$iv_ruleVariableDef.current; }
	EOF;

// Rule VariableDef
ruleVariableDef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariableDefAccess().getVarKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVariableDefAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableDefRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getVariableDefAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableDefAccess().getTypeTypeEnumRuleCall_3_0());
				}
				lv_type_3_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableDefRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"dk.sdu.frhou18.mdsd.IF22.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTarget
entryRuleTarget returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTargetRule()); }
	iv_ruleTarget=ruleTarget
	{ $current=$iv_ruleTarget.current; }
	EOF;

// Rule Target
ruleTarget returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='to'
		{
			newLeafNode(otherlv_0, grammarAccess.getTargetAccess().getToKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTargetRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getTargetAccess().getTargetTargetTargetCrossReference_1_0());
				}
			)
		)
		(
			otherlv_2='if'
			{
				newLeafNode(otherlv_2, grammarAccess.getTargetAccess().getIfKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTargetAccess().getLogicLogicExpParserRuleCall_2_1_0());
					}
					lv_logic_3_0=ruleLogicExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTargetRule());
						}
						set(
							$current,
							"logic",
							lv_logic_3_0,
							"dk.sdu.frhou18.mdsd.IF22.LogicExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleThis
entryRuleThis returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getThisRule()); }
	iv_ruleThis=ruleThis
	{ $current=$iv_ruleThis.current; }
	EOF;

// Rule This
ruleThis returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getThisAccess().getThisAction_0(),
					$current);
			}
		)
		otherlv_1='this'
		{
			newLeafNode(otherlv_1, grammarAccess.getThisAccess().getThisKeyword_1());
		}
	)
;

// Entry rule entryRuleLogicExp
entryRuleLogicExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicExpRule()); }
	iv_ruleLogicExp=ruleLogicExp
	{ $current=$iv_ruleLogicExp.current; }
	EOF;

// Rule LogicExp
ruleLogicExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLogicExpAccess().getLogicAndORParserRuleCall_0());
		}
		this_LogicAndOR_0=ruleLogicAndOR
		{
			$current = $this_LogicAndOR_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					otherlv_1='=='
					{
						newLeafNode(otherlv_1, grammarAccess.getLogicExpAccess().getEqualsSignEqualsSignKeyword_1_0_0_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getLogicExpAccess().getEqualsLeftAction_1_0_0_1(),
								$current);
						}
					)
				)
				    |
				(
					otherlv_3='!='
					{
						newLeafNode(otherlv_3, grammarAccess.getLogicExpAccess().getExclamationMarkEqualsSignKeyword_1_0_1_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getLogicExpAccess().getNotEqualsLeftAction_1_0_1_1(),
								$current);
						}
					)
				)
				    |
				(
					otherlv_5='<'
					{
						newLeafNode(otherlv_5, grammarAccess.getLogicExpAccess().getLessThanSignKeyword_1_0_2_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getLogicExpAccess().getLessLeftAction_1_0_2_1(),
								$current);
						}
					)
				)
				    |
				(
					otherlv_7='>'
					{
						newLeafNode(otherlv_7, grammarAccess.getLogicExpAccess().getGreaterThanSignKeyword_1_0_3_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getLogicExpAccess().getGreaterLeftAction_1_0_3_1(),
								$current);
						}
					)
				)
				    |
				(
					otherlv_9='<='
					{
						newLeafNode(otherlv_9, grammarAccess.getLogicExpAccess().getLessThanSignEqualsSignKeyword_1_0_4_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getLogicExpAccess().getLessOrEqualsLeftAction_1_0_4_1(),
								$current);
						}
					)
				)
				    |
				(
					otherlv_11='>='
					{
						newLeafNode(otherlv_11, grammarAccess.getLogicExpAccess().getGreaterThanSignEqualsSignKeyword_1_0_5_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getLogicExpAccess().getGreaterOrEqualsLeftAction_1_0_5_1(),
								$current);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicExpAccess().getRightLogicAndORParserRuleCall_1_1_0());
					}
					lv_right_13_0=ruleLogicAndOR
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicExpRule());
						}
						set(
							$current,
							"right",
							lv_right_13_0,
							"dk.sdu.frhou18.mdsd.IF22.LogicAndOR");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleLogicAndOR
entryRuleLogicAndOR returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicAndORRule()); }
	iv_ruleLogicAndOR=ruleLogicAndOR
	{ $current=$iv_ruleLogicAndOR.current; }
	EOF;

// Rule LogicAndOR
ruleLogicAndOR returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLogicAndORAccess().getMathExpParserRuleCall_0());
		}
		this_MathExp_0=ruleMathExp
		{
			$current = $this_MathExp_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					otherlv_1='&&'
					{
						newLeafNode(otherlv_1, grammarAccess.getLogicAndORAccess().getAmpersandAmpersandKeyword_1_0_0_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getLogicAndORAccess().getAndLeftAction_1_0_0_1(),
								$current);
						}
					)
				)
				    |
				(
					otherlv_3='||'
					{
						newLeafNode(otherlv_3, grammarAccess.getLogicAndORAccess().getVerticalLineVerticalLineKeyword_1_0_1_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getLogicAndORAccess().getOrLeftAction_1_0_1_1(),
								$current);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicAndORAccess().getRightMathExpParserRuleCall_1_1_0());
					}
					lv_right_5_0=ruleMathExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicAndORRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"dk.sdu.frhou18.mdsd.IF22.MathExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleLogicNot
entryRuleLogicNot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicNotRule()); }
	iv_ruleLogicNot=ruleLogicNot
	{ $current=$iv_ruleLogicNot.current; }
	EOF;

// Rule LogicNot
ruleLogicNot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLogicNotAccess().getLogicNotAction_0(),
					$current);
			}
		)
		otherlv_1='!'
		{
			newLeafNode(otherlv_1, grammarAccess.getLogicNotAccess().getExclamationMarkKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLogicNotAccess().getRefPrimaryParserRuleCall_2_0());
				}
				lv_ref_2_0=rulePrimary
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLogicNotRule());
					}
					set(
						$current,
						"ref",
						lv_ref_2_0,
						"dk.sdu.frhou18.mdsd.IF22.Primary");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleParentheses
entryRuleParentheses returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParenthesesRule()); }
	iv_ruleParentheses=ruleParentheses
	{ $current=$iv_ruleParentheses.current; }
	EOF;

// Rule Parentheses
ruleParentheses returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getParenthesesAccess().getParenthesesAction_0(),
					$current);
			}
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getParenthesesAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParenthesesAccess().getRefLogicExpParserRuleCall_2_0());
				}
				lv_ref_2_0=ruleLogicExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParenthesesRule());
					}
					set(
						$current,
						"ref",
						lv_ref_2_0,
						"dk.sdu.frhou18.mdsd.IF22.LogicExp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getParenthesesAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleBoolean
entryRuleBoolean returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanRule()); }
	iv_ruleBoolean=ruleBoolean
	{ $current=$iv_ruleBoolean.current; }
	EOF;

// Rule Boolean
ruleBoolean returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBooleanAccess().getBooleanAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBooleanAccess().getValBooleanValueEnumRuleCall_1_0());
				}
				lv_val_1_0=ruleBooleanValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBooleanRule());
					}
					set(
						$current,
						"val",
						lv_val_1_0,
						"dk.sdu.frhou18.mdsd.IF22.BooleanValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMathExp
entryRuleMathExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMathExpRule()); }
	iv_ruleMathExp=ruleMathExp
	{ $current=$iv_ruleMathExp.current; }
	EOF;

// Rule MathExp
ruleMathExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMathExpAccess().getMultDivMathExpParserRuleCall_0());
		}
		this_MultDivMathExp_0=ruleMultDivMathExp
		{
			$current = $this_MultDivMathExp_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					otherlv_1='+'
					{
						newLeafNode(otherlv_1, grammarAccess.getMathExpAccess().getPlusSignKeyword_1_0_0_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getMathExpAccess().getPlusLeftAction_1_0_0_1(),
								$current);
						}
					)
				)
				    |
				(
					otherlv_3='-'
					{
						newLeafNode(otherlv_3, grammarAccess.getMathExpAccess().getHyphenMinusKeyword_1_0_1_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getMathExpAccess().getMinusLeftAction_1_0_1_1(),
								$current);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMathExpAccess().getRightMultDivMathExpParserRuleCall_1_1_0());
					}
					lv_right_5_0=ruleMultDivMathExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMathExpRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"dk.sdu.frhou18.mdsd.IF22.MultDivMathExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultDivMathExp
entryRuleMultDivMathExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultDivMathExpRule()); }
	iv_ruleMultDivMathExp=ruleMultDivMathExp
	{ $current=$iv_ruleMultDivMathExp.current; }
	EOF;

// Rule MultDivMathExp
ruleMultDivMathExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultDivMathExpAccess().getTextExpParserRuleCall_0());
		}
		this_TextExp_0=ruleTextExp
		{
			$current = $this_TextExp_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					otherlv_1='*'
					{
						newLeafNode(otherlv_1, grammarAccess.getMultDivMathExpAccess().getAsteriskKeyword_1_0_0_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getMultDivMathExpAccess().getMultiplicationLeftAction_1_0_0_1(),
								$current);
						}
					)
				)
				    |
				(
					otherlv_3='/'
					{
						newLeafNode(otherlv_3, grammarAccess.getMultDivMathExpAccess().getSolidusKeyword_1_0_1_0());
					}
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getMultDivMathExpAccess().getDivisionLeftAction_1_0_1_1(),
								$current);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultDivMathExpAccess().getRightTextExpParserRuleCall_1_1_0());
					}
					lv_right_5_0=ruleTextExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultDivMathExpRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"dk.sdu.frhou18.mdsd.IF22.TextExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMathNumberExp
entryRuleMathNumberExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMathNumberExpRule()); }
	iv_ruleMathNumberExp=ruleMathNumberExp
	{ $current=$iv_ruleMathNumberExp.current; }
	EOF;

// Rule MathNumberExp
ruleMathNumberExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMathNumberExpAccess().getMathNumberExpAction_0(),
					$current);
			}
		)
		(
			(
				lv_value_1_0=RULE_INT
				{
					newLeafNode(lv_value_1_0, grammarAccess.getMathNumberExpAccess().getValueINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMathNumberExpRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleTextExp
entryRuleTextExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTextExpRule()); }
	iv_ruleTextExp=ruleTextExp
	{ $current=$iv_ruleTextExp.current; }
	EOF;

// Rule TextExp
ruleTextExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTextExpAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				otherlv_1='&'
				{
					newLeafNode(otherlv_1, grammarAccess.getTextExpAccess().getAmpersandKeyword_1_0_0());
				}
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getTextExpAccess().getTextExpLeftAction_1_0_1(),
							$current);
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTextExpAccess().getRightPrimaryParserRuleCall_1_1_0());
					}
					lv_right_3_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTextExpRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"dk.sdu.frhou18.mdsd.IF22.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getFunctionUsageParserRuleCall_0());
		}
		this_FunctionUsage_0=ruleFunctionUsage
		{
			$current = $this_FunctionUsage_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getLogicNotParserRuleCall_1());
		}
		this_LogicNot_1=ruleLogicNot
		{
			$current = $this_LogicNot_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getBooleanParserRuleCall_2());
		}
		this_Boolean_2=ruleBoolean
		{
			$current = $this_Boolean_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getParenthesesParserRuleCall_3());
		}
		this_Parentheses_3=ruleParentheses
		{
			$current = $this_Parentheses_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getThisParserRuleCall_4());
		}
		this_This_4=ruleThis
		{
			$current = $this_This_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getMathNumberExpParserRuleCall_5());
		}
		this_MathNumberExp_5=ruleMathNumberExp
		{
			$current = $this_MathNumberExp_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getTextLiteralParserRuleCall_6());
		}
		this_TextLiteral_6=ruleTextLiteral
		{
			$current = $this_TextLiteral_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getVarUseParserRuleCall_7());
		}
		this_VarUse_7=ruleVarUse
		{
			$current = $this_VarUse_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getTypeUsageParserRuleCall_8());
		}
		this_TypeUsage_8=ruleTypeUsage
		{
			$current = $this_TypeUsage_8.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFunctionUsage
entryRuleFunctionUsage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionUsageRule()); }
	iv_ruleFunctionUsage=ruleFunctionUsage
	{ $current=$iv_ruleFunctionUsage.current; }
	EOF;

// Rule FunctionUsage
ruleFunctionUsage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFunctionUsageAccess().getFunctionUsageAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionUsageRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getFunctionUsageAccess().getNameFunctionCrossReference_1_0());
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getFunctionUsageAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionUsageAccess().getExpsLogicExpParserRuleCall_3_0());
				}
				lv_exps_3_0=ruleLogicExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionUsageRule());
					}
					add(
						$current,
						"exps",
						lv_exps_3_0,
						"dk.sdu.frhou18.mdsd.IF22.LogicExp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getFunctionUsageAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionUsageAccess().getExpsLogicExpParserRuleCall_4_1_0());
					}
					lv_exps_5_0=ruleLogicExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionUsageRule());
						}
						add(
							$current,
							"exps",
							lv_exps_5_0,
							"dk.sdu.frhou18.mdsd.IF22.LogicExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getFunctionUsageAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleTextLiteral
entryRuleTextLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTextLiteralRule()); }
	iv_ruleTextLiteral=ruleTextLiteral
	{ $current=$iv_ruleTextLiteral.current; }
	EOF;

// Rule TextLiteral
ruleTextLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTextLiteralAccess().getTextLiteralAction_0(),
					$current);
			}
		)
		(
			(
				lv_text_1_0=RULE_STRING
				{
					newLeafNode(lv_text_1_0, grammarAccess.getTextLiteralAccess().getTextSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTextLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"text",
						lv_text_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleVarUse
entryRuleVarUse returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarUseRule()); }
	iv_ruleVarUse=ruleVarUse
	{ $current=$iv_ruleVarUse.current; }
	EOF;

// Rule VarUse
ruleVarUse returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVarUseAccess().getVarUseAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarUseRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getVarUseAccess().getRefVariableDefCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleTypeUsage
entryRuleTypeUsage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeUsageRule()); }
	iv_ruleTypeUsage=ruleTypeUsage
	{ $current=$iv_ruleTypeUsage.current; }
	EOF;

// Rule TypeUsage
ruleTypeUsage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTypeUsageAccess().getTypeUsageAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeUsageAccess().getTypeTypeEnumRuleCall_1_0());
				}
				lv_type_1_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeUsageRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"dk.sdu.frhou18.mdsd.IF22.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Rule Type
ruleType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='boolean'
			{
				$current = grammarAccess.getTypeAccess().getBooleanEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTypeAccess().getBooleanEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='text'
			{
				$current = grammarAccess.getTypeAccess().getTextEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTypeAccess().getTextEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='number'
			{
				$current = grammarAccess.getTypeAccess().getNumberEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getTypeAccess().getNumberEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule BooleanValue
ruleBooleanValue returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='true'
			{
				$current = grammarAccess.getBooleanValueAccess().getTRUEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBooleanValueAccess().getTRUEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='false'
			{
				$current = grammarAccess.getBooleanValueAccess().getFALSEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBooleanValueAccess().getFALSEEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
