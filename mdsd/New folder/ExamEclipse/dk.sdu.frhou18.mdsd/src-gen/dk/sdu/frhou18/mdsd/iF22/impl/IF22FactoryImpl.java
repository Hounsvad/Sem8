/**
 * generated by Xtext 2.26.0
 */
package dk.sdu.frhou18.mdsd.iF22.impl;

import dk.sdu.frhou18.mdsd.iF22.And;
import dk.sdu.frhou18.mdsd.iF22.Announce;
import dk.sdu.frhou18.mdsd.iF22.BooleanValue;
import dk.sdu.frhou18.mdsd.iF22.Division;
import dk.sdu.frhou18.mdsd.iF22.End;
import dk.sdu.frhou18.mdsd.iF22.Equals;
import dk.sdu.frhou18.mdsd.iF22.Expression;
import dk.sdu.frhou18.mdsd.iF22.Function;
import dk.sdu.frhou18.mdsd.iF22.FunctionUsage;
import dk.sdu.frhou18.mdsd.iF22.Greater;
import dk.sdu.frhou18.mdsd.iF22.GreaterOrEquals;
import dk.sdu.frhou18.mdsd.iF22.IF22Factory;
import dk.sdu.frhou18.mdsd.iF22.IF22Package;
import dk.sdu.frhou18.mdsd.iF22.Less;
import dk.sdu.frhou18.mdsd.iF22.LessOrEquals;
import dk.sdu.frhou18.mdsd.iF22.LogicNot;
import dk.sdu.frhou18.mdsd.iF22.MathNumberExp;
import dk.sdu.frhou18.mdsd.iF22.Minus;
import dk.sdu.frhou18.mdsd.iF22.Model;
import dk.sdu.frhou18.mdsd.iF22.Multiplication;
import dk.sdu.frhou18.mdsd.iF22.NotEquals;
import dk.sdu.frhou18.mdsd.iF22.Or;
import dk.sdu.frhou18.mdsd.iF22.Parentheses;
import dk.sdu.frhou18.mdsd.iF22.Plus;
import dk.sdu.frhou18.mdsd.iF22.Question;
import dk.sdu.frhou18.mdsd.iF22.Scenario;
import dk.sdu.frhou18.mdsd.iF22.Statement;
import dk.sdu.frhou18.mdsd.iF22.Story;
import dk.sdu.frhou18.mdsd.iF22.StringProducer;
import dk.sdu.frhou18.mdsd.iF22.Target;
import dk.sdu.frhou18.mdsd.iF22.TargetTarget;
import dk.sdu.frhou18.mdsd.iF22.TextExp;
import dk.sdu.frhou18.mdsd.iF22.TextLiteral;
import dk.sdu.frhou18.mdsd.iF22.This;
import dk.sdu.frhou18.mdsd.iF22.Type;
import dk.sdu.frhou18.mdsd.iF22.TypeUsage;
import dk.sdu.frhou18.mdsd.iF22.VarUse;
import dk.sdu.frhou18.mdsd.iF22.VariableDef;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class IF22FactoryImpl extends EFactoryImpl implements IF22Factory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static IF22Factory init()
  {
    try
    {
      IF22Factory theIF22Factory = (IF22Factory)EPackage.Registry.INSTANCE.getEFactory(IF22Package.eNS_URI);
      if (theIF22Factory != null)
      {
        return theIF22Factory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new IF22FactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IF22FactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case IF22Package.MODEL: return createModel();
      case IF22Package.FUNCTION: return createFunction();
      case IF22Package.STORY: return createStory();
      case IF22Package.SCENARIO: return createScenario();
      case IF22Package.STATEMENT: return createStatement();
      case IF22Package.END: return createEnd();
      case IF22Package.ANNOUNCE: return createAnnounce();
      case IF22Package.QUESTION: return createQuestion();
      case IF22Package.VARIABLE_DEF: return createVariableDef();
      case IF22Package.TARGET: return createTarget();
      case IF22Package.TARGET_TARGET: return createTargetTarget();
      case IF22Package.STRING_PRODUCER: return createStringProducer();
      case IF22Package.EXPRESSION: return createExpression();
      case IF22Package.THIS: return createThis();
      case IF22Package.EQUALS: return createEquals();
      case IF22Package.NOT_EQUALS: return createNotEquals();
      case IF22Package.LESS: return createLess();
      case IF22Package.GREATER: return createGreater();
      case IF22Package.LESS_OR_EQUALS: return createLessOrEquals();
      case IF22Package.GREATER_OR_EQUALS: return createGreaterOrEquals();
      case IF22Package.AND: return createAnd();
      case IF22Package.OR: return createOr();
      case IF22Package.LOGIC_NOT: return createLogicNot();
      case IF22Package.PARENTHESES: return createParentheses();
      case IF22Package.BOOLEAN: return createBoolean();
      case IF22Package.PLUS: return createPlus();
      case IF22Package.MINUS: return createMinus();
      case IF22Package.MULTIPLICATION: return createMultiplication();
      case IF22Package.DIVISION: return createDivision();
      case IF22Package.MATH_NUMBER_EXP: return createMathNumberExp();
      case IF22Package.TEXT_EXP: return createTextExp();
      case IF22Package.FUNCTION_USAGE: return createFunctionUsage();
      case IF22Package.TEXT_LITERAL: return createTextLiteral();
      case IF22Package.VAR_USE: return createVarUse();
      case IF22Package.TYPE_USAGE: return createTypeUsage();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case IF22Package.TYPE:
        return createTypeFromString(eDataType, initialValue);
      case IF22Package.BOOLEAN_VALUE:
        return createBooleanValueFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case IF22Package.TYPE:
        return convertTypeToString(eDataType, instanceValue);
      case IF22Package.BOOLEAN_VALUE:
        return convertBooleanValueToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Function createFunction()
  {
    FunctionImpl function = new FunctionImpl();
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Story createStory()
  {
    StoryImpl story = new StoryImpl();
    return story;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Scenario createScenario()
  {
    ScenarioImpl scenario = new ScenarioImpl();
    return scenario;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public End createEnd()
  {
    EndImpl end = new EndImpl();
    return end;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Announce createAnnounce()
  {
    AnnounceImpl announce = new AnnounceImpl();
    return announce;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Question createQuestion()
  {
    QuestionImpl question = new QuestionImpl();
    return question;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableDef createVariableDef()
  {
    VariableDefImpl variableDef = new VariableDefImpl();
    return variableDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Target createTarget()
  {
    TargetImpl target = new TargetImpl();
    return target;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TargetTarget createTargetTarget()
  {
    TargetTargetImpl targetTarget = new TargetTargetImpl();
    return targetTarget;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringProducer createStringProducer()
  {
    StringProducerImpl stringProducer = new StringProducerImpl();
    return stringProducer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public This createThis()
  {
    ThisImpl this_ = new ThisImpl();
    return this_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Equals createEquals()
  {
    EqualsImpl equals = new EqualsImpl();
    return equals;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotEquals createNotEquals()
  {
    NotEqualsImpl notEquals = new NotEqualsImpl();
    return notEquals;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Less createLess()
  {
    LessImpl less = new LessImpl();
    return less;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Greater createGreater()
  {
    GreaterImpl greater = new GreaterImpl();
    return greater;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LessOrEquals createLessOrEquals()
  {
    LessOrEqualsImpl lessOrEquals = new LessOrEqualsImpl();
    return lessOrEquals;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GreaterOrEquals createGreaterOrEquals()
  {
    GreaterOrEqualsImpl greaterOrEquals = new GreaterOrEqualsImpl();
    return greaterOrEquals;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public And createAnd()
  {
    AndImpl and = new AndImpl();
    return and;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Or createOr()
  {
    OrImpl or = new OrImpl();
    return or;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogicNot createLogicNot()
  {
    LogicNotImpl logicNot = new LogicNotImpl();
    return logicNot;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parentheses createParentheses()
  {
    ParenthesesImpl parentheses = new ParenthesesImpl();
    return parentheses;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public dk.sdu.frhou18.mdsd.iF22.Boolean createBoolean()
  {
    BooleanImpl boolean_ = new BooleanImpl();
    return boolean_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Plus createPlus()
  {
    PlusImpl plus = new PlusImpl();
    return plus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Minus createMinus()
  {
    MinusImpl minus = new MinusImpl();
    return minus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Multiplication createMultiplication()
  {
    MultiplicationImpl multiplication = new MultiplicationImpl();
    return multiplication;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Division createDivision()
  {
    DivisionImpl division = new DivisionImpl();
    return division;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MathNumberExp createMathNumberExp()
  {
    MathNumberExpImpl mathNumberExp = new MathNumberExpImpl();
    return mathNumberExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TextExp createTextExp()
  {
    TextExpImpl textExp = new TextExpImpl();
    return textExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionUsage createFunctionUsage()
  {
    FunctionUsageImpl functionUsage = new FunctionUsageImpl();
    return functionUsage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TextLiteral createTextLiteral()
  {
    TextLiteralImpl textLiteral = new TextLiteralImpl();
    return textLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarUse createVarUse()
  {
    VarUseImpl varUse = new VarUseImpl();
    return varUse;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeUsage createTypeUsage()
  {
    TypeUsageImpl typeUsage = new TypeUsageImpl();
    return typeUsage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Type createTypeFromString(EDataType eDataType, String initialValue)
  {
    Type result = Type.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BooleanValue createBooleanValueFromString(EDataType eDataType, String initialValue)
  {
    BooleanValue result = BooleanValue.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBooleanValueToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IF22Package getIF22Package()
  {
    return (IF22Package)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static IF22Package getPackage()
  {
    return IF22Package.eINSTANCE;
  }

} //IF22FactoryImpl
