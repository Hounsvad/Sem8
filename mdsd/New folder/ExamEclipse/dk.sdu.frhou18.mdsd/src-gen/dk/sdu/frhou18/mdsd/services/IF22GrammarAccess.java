/*
 * generated by Xtext 2.26.0
 */
package dk.sdu.frhou18.mdsd.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class IF22GrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.frhou18.mdsd.IF22.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStoryNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStoryNameStoryParserRuleCall_0_0 = (RuleCall)cStoryNameAssignment_0.eContents().get(0);
		private final Assignment cFunctionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionsFunctionParserRuleCall_1_0 = (RuleCall)cFunctionsAssignment_1.eContents().get(0);
		private final Assignment cScenariosAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cScenariosScenarioParserRuleCall_2_0 = (RuleCall)cScenariosAssignment_2.eContents().get(0);
		
		//Model:
		//    storyName = Story functions+=Function* scenarios+=Scenario+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//storyName = Story functions+=Function* scenarios+=Scenario+
		public Group getGroup() { return cGroup; }
		
		//storyName = Story
		public Assignment getStoryNameAssignment_0() { return cStoryNameAssignment_0; }
		
		//Story
		public RuleCall getStoryNameStoryParserRuleCall_0_0() { return cStoryNameStoryParserRuleCall_0_0; }
		
		//functions+=Function*
		public Assignment getFunctionsAssignment_1() { return cFunctionsAssignment_1; }
		
		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_1_0() { return cFunctionsFunctionParserRuleCall_1_0; }
		
		//scenarios+=Scenario+
		public Assignment getScenariosAssignment_2() { return cScenariosAssignment_2; }
		
		//Scenario
		public RuleCall getScenariosScenarioParserRuleCall_2_0() { return cScenariosScenarioParserRuleCall_2_0; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.frhou18.mdsd.IF22.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersTypeUsageParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersTypeUsageParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTypeTypeEnumRuleCall_6_0 = (RuleCall)cTypeAssignment_6.eContents().get(0);
		
		//Function:
		//    'function' name=ID '(' (parameters+=TypeUsage (',' parameters+=TypeUsage)*)? ')' ':' type = Type
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'function' name=ID '(' (parameters+=TypeUsage (',' parameters+=TypeUsage)*)? ')' ':' type = Type
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(parameters+=TypeUsage (',' parameters+=TypeUsage)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//parameters+=TypeUsage
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }
		
		//TypeUsage
		public RuleCall getParametersTypeUsageParserRuleCall_3_0_0() { return cParametersTypeUsageParserRuleCall_3_0_0; }
		
		//(',' parameters+=TypeUsage)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//parameters+=TypeUsage
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }
		
		//TypeUsage
		public RuleCall getParametersTypeUsageParserRuleCall_3_1_1_0() { return cParametersTypeUsageParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//type = Type
		public Assignment getTypeAssignment_6() { return cTypeAssignment_6; }
		
		//Type
		public RuleCall getTypeTypeEnumRuleCall_6_0() { return cTypeTypeEnumRuleCall_6_0; }
	}
	public class StoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.frhou18.mdsd.IF22.Story");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Story:
		//    'story' name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'story' name=ID
		public Group getGroup() { return cGroup; }
		
		//'story'
		public Keyword getStoryKeyword_0() { return cStoryKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.frhou18.mdsd.IF22.Scenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScenarioKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariablesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariablesVariableDefParserRuleCall_3_0 = (RuleCall)cVariablesAssignment_3.eContents().get(0);
		private final Assignment cStatemensAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatemensStatementParserRuleCall_4_0 = (RuleCall)cStatemensAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Scenario:
		//    'scenario' name=ID '{' variables+=VariableDef* statemens+=Statement* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'scenario' name=ID '{' variables+=VariableDef* statemens+=Statement* '}'
		public Group getGroup() { return cGroup; }
		
		//'scenario'
		public Keyword getScenarioKeyword_0() { return cScenarioKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//variables+=VariableDef*
		public Assignment getVariablesAssignment_3() { return cVariablesAssignment_3; }
		
		//VariableDef
		public RuleCall getVariablesVariableDefParserRuleCall_3_0() { return cVariablesVariableDefParserRuleCall_3_0; }
		
		//statemens+=Statement*
		public Assignment getStatemensAssignment_4() { return cStatemensAssignment_4; }
		
		//Statement
		public RuleCall getStatemensStatementParserRuleCall_4_0() { return cStatemensStatementParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.frhou18.mdsd.IF22.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEndParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAnnounceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cQuestionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Statement:
		//    End | Announce | Question
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//End | Announce | Question
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//End
		public RuleCall getEndParserRuleCall_0() { return cEndParserRuleCall_0; }
		
		//Announce
		public RuleCall getAnnounceParserRuleCall_1() { return cAnnounceParserRuleCall_1; }
		
		//Question
		public RuleCall getQuestionParserRuleCall_2() { return cQuestionParserRuleCall_2; }
	}
	public class EndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.frhou18.mdsd.IF22.End");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cEndMessageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEndMessageLogicExpParserRuleCall_2_0 = (RuleCall)cEndMessageAssignment_2.eContents().get(0);
		
		//End:
		//    'end' name=ID endMessage=LogicExp
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'end' name=ID endMessage=LogicExp
		public Group getGroup() { return cGroup; }
		
		//'end'
		public Keyword getEndKeyword_0() { return cEndKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//endMessage=LogicExp
		public Assignment getEndMessageAssignment_2() { return cEndMessageAssignment_2; }
		
		//LogicExp
		public RuleCall getEndMessageLogicExpParserRuleCall_2_0() { return cEndMessageLogicExpParserRuleCall_2_0; }
	}
	public class AnnounceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.frhou18.mdsd.IF22.Announce");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnnounceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextLogicExpParserRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTargetTargetParserRuleCall_3_0 = (RuleCall)cTargetAssignment_3.eContents().get(0);
		
		//Announce:
		//    'announce' name=ID text=LogicExp target=Target
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'announce' name=ID text=LogicExp target=Target
		public Group getGroup() { return cGroup; }
		
		//'announce'
		public Keyword getAnnounceKeyword_0() { return cAnnounceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//text=LogicExp
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }
		
		//LogicExp
		public RuleCall getTextLogicExpParserRuleCall_2_0() { return cTextLogicExpParserRuleCall_2_0; }
		
		//target=Target
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }
		
		//Target
		public RuleCall getTargetTargetParserRuleCall_3_0() { return cTargetTargetParserRuleCall_3_0; }
	}
	public class QuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.frhou18.mdsd.IF22.Question");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextLogicExpParserRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);
		private final Keyword cAsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAsValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAsValueLogicExpParserRuleCall_4_0 = (RuleCall)cAsValueAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cInKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cInVarAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cInVarVarUseParserRuleCall_5_1_0 = (RuleCall)cInVarAssignment_5_1.eContents().get(0);
		private final Assignment cTargetsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTargetsTargetParserRuleCall_6_0 = (RuleCall)cTargetsAssignment_6.eContents().get(0);
		
		//Question:
		//    'question' name=ID text=LogicExp 'as' asValue=LogicExp ('in' inVar=VarUse)? targets+=Target+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'question' name=ID text=LogicExp 'as' asValue=LogicExp ('in' inVar=VarUse)? targets+=Target+
		public Group getGroup() { return cGroup; }
		
		//'question'
		public Keyword getQuestionKeyword_0() { return cQuestionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//text=LogicExp
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }
		
		//LogicExp
		public RuleCall getTextLogicExpParserRuleCall_2_0() { return cTextLogicExpParserRuleCall_2_0; }
		
		//'as'
		public Keyword getAsKeyword_3() { return cAsKeyword_3; }
		
		//asValue=LogicExp
		public Assignment getAsValueAssignment_4() { return cAsValueAssignment_4; }
		
		//LogicExp
		public RuleCall getAsValueLogicExpParserRuleCall_4_0() { return cAsValueLogicExpParserRuleCall_4_0; }
		
		//('in' inVar=VarUse)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'in'
		public Keyword getInKeyword_5_0() { return cInKeyword_5_0; }
		
		//inVar=VarUse
		public Assignment getInVarAssignment_5_1() { return cInVarAssignment_5_1; }
		
		//VarUse
		public RuleCall getInVarVarUseParserRuleCall_5_1_0() { return cInVarVarUseParserRuleCall_5_1_0; }
		
		//targets+=Target+
		public Assignment getTargetsAssignment_6() { return cTargetsAssignment_6; }
		
		//Target
		public RuleCall getTargetsTargetParserRuleCall_6_0() { return cTargetsTargetParserRuleCall_6_0; }
	}
	public class VariableDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.frhou18.mdsd.IF22.VariableDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//VariableDef:
		//    'var' name=ID ':' type=Type
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'var' name=ID ':' type=Type
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//Type
		public RuleCall getTypeTypeEnumRuleCall_3_0() { return cTypeTypeEnumRuleCall_3_0; }
	}
	public class TargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.frhou18.mdsd.IF22.Target");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cToKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetTargetTargetCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetTargetTargetIDTerminalRuleCall_1_0_1 = (RuleCall)cTargetTargetTargetCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLogicAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLogicLogicExpParserRuleCall_2_1_0 = (RuleCall)cLogicAssignment_2_1.eContents().get(0);
		
		//Target:
		//    'to' target=[TargetTarget] ('if' logic=LogicExp)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'to' target=[TargetTarget] ('if' logic=LogicExp)?
		public Group getGroup() { return cGroup; }
		
		//'to'
		public Keyword getToKeyword_0() { return cToKeyword_0; }
		
		//target=[TargetTarget]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//[TargetTarget]
		public CrossReference getTargetTargetTargetCrossReference_1_0() { return cTargetTargetTargetCrossReference_1_0; }
		
		//ID
		public RuleCall getTargetTargetTargetIDTerminalRuleCall_1_0_1() { return cTargetTargetTargetIDTerminalRuleCall_1_0_1; }
		
		//('if' logic=LogicExp)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'if'
		public Keyword getIfKeyword_2_0() { return cIfKeyword_2_0; }
		
		//logic=LogicExp
		public Assignment getLogicAssignment_2_1() { return cLogicAssignment_2_1; }
		
		//LogicExp
		public RuleCall getLogicLogicExpParserRuleCall_2_1_0() { return cLogicLogicExpParserRuleCall_2_1_0; }
	}
	public class TargetTargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.frhou18.mdsd.IF22.TargetTarget");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cScenarioParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TargetTarget:
		//    Scenario | Statement
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Scenario | Statement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Scenario
		public RuleCall getScenarioParserRuleCall_0() { return cScenarioParserRuleCall_0; }
		
		//Statement
		public RuleCall getStatementParserRuleCall_1() { return cStatementParserRuleCall_1; }
	}
	public class StringProducerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.frhou18.mdsd.IF22.StringProducer");
		private final RuleCall cTextExpParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//StringProducer:
		//    TextExp
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//TextExp
		public RuleCall getTextExpParserRuleCall() { return cTextExpParserRuleCall; }
	}
	public class ThisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.frhou18.mdsd.IF22.This");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cThisAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cThisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//This returns Expression:
		//    {This} 'this'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{This} 'this'
		public Group getGroup() { return cGroup; }
		
		//{This}
		public Action getThisAction_0() { return cThisAction_0; }
		
		//'this'
		public Keyword getThisKeyword_1() { return cThisKeyword_1; }
	}
	public class LogicExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.frhou18.mdsd.IF22.LogicExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicAndORParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Action cEqualsLeftAction_1_0_0_1 = (Action)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Action cNotEqualsLeftAction_1_0_1_1 = (Action)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Keyword cLessThanSignKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Action cLessLeftAction_1_0_2_1 = (Action)cGroup_1_0_2.eContents().get(1);
		private final Group cGroup_1_0_3 = (Group)cAlternatives_1_0.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_1_0_3_0 = (Keyword)cGroup_1_0_3.eContents().get(0);
		private final Action cGreaterLeftAction_1_0_3_1 = (Action)cGroup_1_0_3.eContents().get(1);
		private final Group cGroup_1_0_4 = (Group)cAlternatives_1_0.eContents().get(4);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0_4_0 = (Keyword)cGroup_1_0_4.eContents().get(0);
		private final Action cLessOrEqualsLeftAction_1_0_4_1 = (Action)cGroup_1_0_4.eContents().get(1);
		private final Group cGroup_1_0_5 = (Group)cAlternatives_1_0.eContents().get(5);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_0_5_0 = (Keyword)cGroup_1_0_5.eContents().get(0);
		private final Action cGreaterOrEqualsLeftAction_1_0_5_1 = (Action)cGroup_1_0_5.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightLogicAndORParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//LogicExp returns Expression:
		//    LogicAndOR (('==' {Equals.left=current}| '!=' {NotEquals.left=current}| '<' {Less.left=current}| '>' {Greater.left=current}| '<=' {LessOrEquals.left=current}| '>='{GreaterOrEquals.left=current})  right=LogicAndOR)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicAndOR (('==' {Equals.left=current}| '!=' {NotEquals.left=current}| '<' {Less.left=current}| '>' {Greater.left=current}| '<=' {LessOrEquals.left=current}| '>='{GreaterOrEquals.left=current})  right=LogicAndOR)*
		public Group getGroup() { return cGroup; }
		
		//LogicAndOR
		public RuleCall getLogicAndORParserRuleCall_0() { return cLogicAndORParserRuleCall_0; }
		
		//(('==' {Equals.left=current}| '!=' {NotEquals.left=current}| '<' {Less.left=current}| '>' {Greater.left=current}| '<=' {LessOrEquals.left=current}| '>='{GreaterOrEquals.left=current})  right=LogicAndOR)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('==' {Equals.left=current}| '!=' {NotEquals.left=current}| '<' {Less.left=current}| '>' {Greater.left=current}| '<=' {LessOrEquals.left=current}| '>='{GreaterOrEquals.left=current})
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'==' {Equals.left=current}
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1_0_0_0() { return cEqualsSignEqualsSignKeyword_1_0_0_0; }
		
		//{Equals.left=current}
		public Action getEqualsLeftAction_1_0_0_1() { return cEqualsLeftAction_1_0_0_1; }
		
		//'!=' {NotEquals.left=current}
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_1_0() { return cExclamationMarkEqualsSignKeyword_1_0_1_0; }
		
		//{NotEquals.left=current}
		public Action getNotEqualsLeftAction_1_0_1_1() { return cNotEqualsLeftAction_1_0_1_1; }
		
		//'<' {Less.left=current}
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0_2_0() { return cLessThanSignKeyword_1_0_2_0; }
		
		//{Less.left=current}
		public Action getLessLeftAction_1_0_2_1() { return cLessLeftAction_1_0_2_1; }
		
		//'>' {Greater.left=current}
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_0_3_0() { return cGreaterThanSignKeyword_1_0_3_0; }
		
		//{Greater.left=current}
		public Action getGreaterLeftAction_1_0_3_1() { return cGreaterLeftAction_1_0_3_1; }
		
		//'<=' {LessOrEquals.left=current}
		public Group getGroup_1_0_4() { return cGroup_1_0_4; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1_0_4_0() { return cLessThanSignEqualsSignKeyword_1_0_4_0; }
		
		//{LessOrEquals.left=current}
		public Action getLessOrEqualsLeftAction_1_0_4_1() { return cLessOrEqualsLeftAction_1_0_4_1; }
		
		//'>='{GreaterOrEquals.left=current}
		public Group getGroup_1_0_5() { return cGroup_1_0_5; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1_0_5_0() { return cGreaterThanSignEqualsSignKeyword_1_0_5_0; }
		
		//{GreaterOrEquals.left=current}
		public Action getGreaterOrEqualsLeftAction_1_0_5_1() { return cGreaterOrEqualsLeftAction_1_0_5_1; }
		
		//right=LogicAndOR
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//LogicAndOR
		public RuleCall getRightLogicAndORParserRuleCall_1_1_0() { return cRightLogicAndORParserRuleCall_1_1_0; }
	}
	public class LogicAndORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.frhou18.mdsd.IF22.LogicAndOR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMathExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Action cAndLeftAction_1_0_0_1 = (Action)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Action cOrLeftAction_1_0_1_1 = (Action)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMathExpParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//LogicAndOR returns Expression:
		//    MathExp (('&&' {And.left=current}|'||' {Or.left=current}) right=MathExp)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MathExp (('&&' {And.left=current}|'||' {Or.left=current}) right=MathExp)*
		public Group getGroup() { return cGroup; }
		
		//MathExp
		public RuleCall getMathExpParserRuleCall_0() { return cMathExpParserRuleCall_0; }
		
		//(('&&' {And.left=current}|'||' {Or.left=current}) right=MathExp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('&&' {And.left=current}|'||' {Or.left=current})
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'&&' {And.left=current}
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_0_0_0() { return cAmpersandAmpersandKeyword_1_0_0_0; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0_0_1() { return cAndLeftAction_1_0_0_1; }
		
		//'||' {Or.left=current}
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_0_1_0() { return cVerticalLineVerticalLineKeyword_1_0_1_0; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0_1_1() { return cOrLeftAction_1_0_1_1; }
		
		//right=MathExp
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MathExp
		public RuleCall getRightMathExpParserRuleCall_1_1_0() { return cRightMathExpParserRuleCall_1_1_0; }
	}
	public class LogicNotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.frhou18.mdsd.IF22.LogicNot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLogicNotAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRefPrimaryParserRuleCall_2_0 = (RuleCall)cRefAssignment_2.eContents().get(0);
		
		//LogicNot returns Expression:
		//    {LogicNot} '!' ref = Primary
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{LogicNot} '!' ref = Primary
		public Group getGroup() { return cGroup; }
		
		//{LogicNot}
		public Action getLogicNotAction_0() { return cLogicNotAction_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1() { return cExclamationMarkKeyword_1; }
		
		//ref = Primary
		public Assignment getRefAssignment_2() { return cRefAssignment_2; }
		
		//Primary
		public RuleCall getRefPrimaryParserRuleCall_2_0() { return cRefPrimaryParserRuleCall_2_0; }
	}
	public class ParenthesesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.frhou18.mdsd.IF22.Parentheses");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParenthesesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRefLogicExpParserRuleCall_2_0 = (RuleCall)cRefAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Parentheses returns Expression:
		//    {Parentheses} '(' ref=LogicExp ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Parentheses} '(' ref=LogicExp ')'
		public Group getGroup() { return cGroup; }
		
		//{Parentheses}
		public Action getParenthesesAction_0() { return cParenthesesAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//ref=LogicExp
		public Assignment getRefAssignment_2() { return cRefAssignment_2; }
		
		//LogicExp
		public RuleCall getRefLogicExpParserRuleCall_2_0() { return cRefLogicExpParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.frhou18.mdsd.IF22.Boolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValBooleanValueEnumRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		
		//Boolean returns Expression:
		//     {Boolean} val=BooleanValue
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Boolean} val=BooleanValue
		public Group getGroup() { return cGroup; }
		
		//{Boolean}
		public Action getBooleanAction_0() { return cBooleanAction_0; }
		
		//val=BooleanValue
		public Assignment getValAssignment_1() { return cValAssignment_1; }
		
		//BooleanValue
		public RuleCall getValBooleanValueEnumRuleCall_1_0() { return cValBooleanValueEnumRuleCall_1_0; }
	}
	public class MathExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.frhou18.mdsd.IF22.MathExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultDivMathExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_1 = (Action)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Action cMinusLeftAction_1_0_1_1 = (Action)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultDivMathExpParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		////Potentially no parenthesese in maths, java is gut boi
		//MathExp returns Expression:
		//    MultDivMathExp (('+' {Plus.left=current} | '-' {Minus.left=current}) right = MultDivMathExp)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MultDivMathExp (('+' {Plus.left=current} | '-' {Minus.left=current}) right = MultDivMathExp)*
		public Group getGroup() { return cGroup; }
		
		//MultDivMathExp
		public RuleCall getMultDivMathExpParserRuleCall_0() { return cMultDivMathExpParserRuleCall_0; }
		
		//(('+' {Plus.left=current} | '-' {Minus.left=current}) right = MultDivMathExp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('+' {Plus.left=current} | '-' {Minus.left=current})
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'+' {Plus.left=current}
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_0() { return cPlusSignKeyword_1_0_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_1() { return cPlusLeftAction_1_0_0_1; }
		
		//'-' {Minus.left=current}
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_0() { return cHyphenMinusKeyword_1_0_1_0; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_1() { return cMinusLeftAction_1_0_1_1; }
		
		//right = MultDivMathExp
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MultDivMathExp
		public RuleCall getRightMultDivMathExpParserRuleCall_1_1_0() { return cRightMultDivMathExpParserRuleCall_1_1_0; }
	}
	public class MultDivMathExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.frhou18.mdsd.IF22.MultDivMathExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTextExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final Action cMultiplicationLeftAction_1_0_0_1 = (Action)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Action cDivisionLeftAction_1_0_1_1 = (Action)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightTextExpParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MultDivMathExp returns Expression:
		//    TextExp (('*' {Multiplication.left=current}| '/' {Division.left=current}) right=TextExp)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//TextExp (('*' {Multiplication.left=current}| '/' {Division.left=current}) right=TextExp)*
		public Group getGroup() { return cGroup; }
		
		//TextExp
		public RuleCall getTextExpParserRuleCall_0() { return cTextExpParserRuleCall_0; }
		
		//(('*' {Multiplication.left=current}| '/' {Division.left=current}) right=TextExp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('*' {Multiplication.left=current}| '/' {Division.left=current})
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'*' {Multiplication.left=current}
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_0() { return cAsteriskKeyword_1_0_0_0; }
		
		//{Multiplication.left=current}
		public Action getMultiplicationLeftAction_1_0_0_1() { return cMultiplicationLeftAction_1_0_0_1; }
		
		//'/' {Division.left=current}
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1_0() { return cSolidusKeyword_1_0_1_0; }
		
		//{Division.left=current}
		public Action getDivisionLeftAction_1_0_1_1() { return cDivisionLeftAction_1_0_1_1; }
		
		//right=TextExp
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//TextExp
		public RuleCall getRightTextExpParserRuleCall_1_1_0() { return cRightTextExpParserRuleCall_1_1_0; }
	}
	public class MathNumberExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.frhou18.mdsd.IF22.MathNumberExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMathNumberExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//MathNumberExp returns Expression:
		//    {MathNumberExp} value=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{MathNumberExp} value=INT
		public Group getGroup() { return cGroup; }
		
		//{MathNumberExp}
		public Action getMathNumberExpAction_0() { return cMathNumberExpAction_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	public class TextExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.frhou18.mdsd.IF22.TextExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Action cTextExpLeftAction_1_0_1 = (Action)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//TextExp returns Expression:
		//    Primary (('&' {TextExp.left=current}) right=Primary)*//{TextExp} stringValues += Primary ('&' stringValues+=Primary)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary (('&' {TextExp.left=current}) right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//(('&' {TextExp.left=current}) right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//('&' {TextExp.left=current})
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'&'
		public Keyword getAmpersandKeyword_1_0_0() { return cAmpersandKeyword_1_0_0; }
		
		//{TextExp.left=current}
		public Action getTextExpLeftAction_1_0_1() { return cTextExpLeftAction_1_0_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_1_0() { return cRightPrimaryParserRuleCall_1_1_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.frhou18.mdsd.IF22.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionUsageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLogicNotParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cParenthesesParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cThisParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMathNumberExpParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cTextLiteralParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cVarUseParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cTypeUsageParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Primary returns Expression:
		//    FunctionUsage | LogicNot | Boolean | Parentheses | This | MathNumberExp | TextLiteral | VarUse | TypeUsage
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//FunctionUsage | LogicNot | Boolean | Parentheses | This | MathNumberExp | TextLiteral | VarUse | TypeUsage
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FunctionUsage
		public RuleCall getFunctionUsageParserRuleCall_0() { return cFunctionUsageParserRuleCall_0; }
		
		//LogicNot
		public RuleCall getLogicNotParserRuleCall_1() { return cLogicNotParserRuleCall_1; }
		
		//Boolean
		public RuleCall getBooleanParserRuleCall_2() { return cBooleanParserRuleCall_2; }
		
		//Parentheses
		public RuleCall getParenthesesParserRuleCall_3() { return cParenthesesParserRuleCall_3; }
		
		//This
		public RuleCall getThisParserRuleCall_4() { return cThisParserRuleCall_4; }
		
		//MathNumberExp
		public RuleCall getMathNumberExpParserRuleCall_5() { return cMathNumberExpParserRuleCall_5; }
		
		//TextLiteral
		public RuleCall getTextLiteralParserRuleCall_6() { return cTextLiteralParserRuleCall_6; }
		
		//VarUse
		public RuleCall getVarUseParserRuleCall_7() { return cVarUseParserRuleCall_7; }
		
		//TypeUsage
		public RuleCall getTypeUsageParserRuleCall_8() { return cTypeUsageParserRuleCall_8; }
	}
	public class FunctionUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.frhou18.mdsd.IF22.FunctionUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionUsageAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameFunctionCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameFunctionIDTerminalRuleCall_1_0_1 = (RuleCall)cNameFunctionCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpsLogicExpParserRuleCall_3_0 = (RuleCall)cExpsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cExpsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cExpsLogicExpParserRuleCall_4_1_0 = (RuleCall)cExpsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//FunctionUsage returns Expression:
		//    {FunctionUsage} name=[Function] '(' exps+=LogicExp (',' exps+=LogicExp)* ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionUsage} name=[Function] '(' exps+=LogicExp (',' exps+=LogicExp)* ')'
		public Group getGroup() { return cGroup; }
		
		//{FunctionUsage}
		public Action getFunctionUsageAction_0() { return cFunctionUsageAction_0; }
		
		//name=[Function]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//[Function]
		public CrossReference getNameFunctionCrossReference_1_0() { return cNameFunctionCrossReference_1_0; }
		
		//ID
		public RuleCall getNameFunctionIDTerminalRuleCall_1_0_1() { return cNameFunctionIDTerminalRuleCall_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//exps+=LogicExp
		public Assignment getExpsAssignment_3() { return cExpsAssignment_3; }
		
		//LogicExp
		public RuleCall getExpsLogicExpParserRuleCall_3_0() { return cExpsLogicExpParserRuleCall_3_0; }
		
		//(',' exps+=LogicExp)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//exps+=LogicExp
		public Assignment getExpsAssignment_4_1() { return cExpsAssignment_4_1; }
		
		//LogicExp
		public RuleCall getExpsLogicExpParserRuleCall_4_1_0() { return cExpsLogicExpParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class TextLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.frhou18.mdsd.IF22.TextLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTextLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//TextLiteral returns Expression:
		//    {TextLiteral} text=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{TextLiteral} text=STRING
		public Group getGroup() { return cGroup; }
		
		//{TextLiteral}
		public Action getTextLiteralAction_0() { return cTextLiteralAction_0; }
		
		//text=STRING
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_0() { return cTextSTRINGTerminalRuleCall_1_0; }
	}
	public class VarUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.frhou18.mdsd.IF22.VarUse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarUseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefVariableDefCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefVariableDefIDTerminalRuleCall_1_0_1 = (RuleCall)cRefVariableDefCrossReference_1_0.eContents().get(1);
		
		//VarUse returns Expression:
		//    {VarUse} ref=[VariableDef]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{VarUse} ref=[VariableDef]
		public Group getGroup() { return cGroup; }
		
		//{VarUse}
		public Action getVarUseAction_0() { return cVarUseAction_0; }
		
		//ref=[VariableDef]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//[VariableDef]
		public CrossReference getRefVariableDefCrossReference_1_0() { return cRefVariableDefCrossReference_1_0; }
		
		//ID
		public RuleCall getRefVariableDefIDTerminalRuleCall_1_0_1() { return cRefVariableDefIDTerminalRuleCall_1_0_1; }
	}
	public class TypeUsageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.frhou18.mdsd.IF22.TypeUsage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeUsageAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//TypeUsage returns Expression:
		//    {TypeUsage} type=Type
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{TypeUsage} type=Type
		public Group getGroup() { return cGroup; }
		
		//{TypeUsage}
		public Action getTypeUsageAction_0() { return cTypeUsageAction_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeEnumRuleCall_1_0() { return cTypeTypeEnumRuleCall_1_0; }
	}
	
	public class TypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.frhou18.mdsd.IF22.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBooleanBooleanKeyword_0_0 = (Keyword)cBooleanEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTextEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTextTextKeyword_1_0 = (Keyword)cTextEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNumberEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNumberNumberKeyword_2_0 = (Keyword)cNumberEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Type:
		//    boolean | text | number
		//;
		public EnumRule getRule() { return rule; }
		
		//boolean | text | number
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//boolean
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_0() { return cBooleanEnumLiteralDeclaration_0; }
		
		public Keyword getBooleanBooleanKeyword_0_0() { return cBooleanBooleanKeyword_0_0; }
		
		//text
		public EnumLiteralDeclaration getTextEnumLiteralDeclaration_1() { return cTextEnumLiteralDeclaration_1; }
		
		public Keyword getTextTextKeyword_1_0() { return cTextTextKeyword_1_0; }
		
		//number
		public EnumLiteralDeclaration getNumberEnumLiteralDeclaration_2() { return cNumberEnumLiteralDeclaration_2; }
		
		public Keyword getNumberNumberKeyword_2_0() { return cNumberNumberKeyword_2_0; }
	}
	public class BooleanValueElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.frhou18.mdsd.IF22.BooleanValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTRUEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTRUETrueKeyword_0_0 = (Keyword)cTRUEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFALSEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFALSEFalseKeyword_1_0 = (Keyword)cFALSEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BooleanValue:
		//    TRUE='true' | FALSE='false'
		//;
		public EnumRule getRule() { return rule; }
		
		//TRUE='true' | FALSE='false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TRUE='true'
		public EnumLiteralDeclaration getTRUEEnumLiteralDeclaration_0() { return cTRUEEnumLiteralDeclaration_0; }
		
		//'true'
		public Keyword getTRUETrueKeyword_0_0() { return cTRUETrueKeyword_0_0; }
		
		//FALSE='false'
		public EnumLiteralDeclaration getFALSEEnumLiteralDeclaration_1() { return cFALSEEnumLiteralDeclaration_1; }
		
		//'false'
		public Keyword getFALSEFalseKeyword_1_0() { return cFALSEFalseKeyword_1_0; }
	}
	
	private final ModelElements pModel;
	private final FunctionElements pFunction;
	private final StoryElements pStory;
	private final ScenarioElements pScenario;
	private final StatementElements pStatement;
	private final EndElements pEnd;
	private final AnnounceElements pAnnounce;
	private final QuestionElements pQuestion;
	private final VariableDefElements pVariableDef;
	private final TypeElements eType;
	private final TargetElements pTarget;
	private final TargetTargetElements pTargetTarget;
	private final StringProducerElements pStringProducer;
	private final ThisElements pThis;
	private final LogicExpElements pLogicExp;
	private final LogicAndORElements pLogicAndOR;
	private final LogicNotElements pLogicNot;
	private final ParenthesesElements pParentheses;
	private final BooleanElements pBoolean;
	private final BooleanValueElements eBooleanValue;
	private final MathExpElements pMathExp;
	private final MultDivMathExpElements pMultDivMathExp;
	private final MathNumberExpElements pMathNumberExp;
	private final TextExpElements pTextExp;
	private final PrimaryElements pPrimary;
	private final FunctionUsageElements pFunctionUsage;
	private final TextLiteralElements pTextLiteral;
	private final VarUseElements pVarUse;
	private final TypeUsageElements pTypeUsage;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public IF22GrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pFunction = new FunctionElements();
		this.pStory = new StoryElements();
		this.pScenario = new ScenarioElements();
		this.pStatement = new StatementElements();
		this.pEnd = new EndElements();
		this.pAnnounce = new AnnounceElements();
		this.pQuestion = new QuestionElements();
		this.pVariableDef = new VariableDefElements();
		this.eType = new TypeElements();
		this.pTarget = new TargetElements();
		this.pTargetTarget = new TargetTargetElements();
		this.pStringProducer = new StringProducerElements();
		this.pThis = new ThisElements();
		this.pLogicExp = new LogicExpElements();
		this.pLogicAndOR = new LogicAndORElements();
		this.pLogicNot = new LogicNotElements();
		this.pParentheses = new ParenthesesElements();
		this.pBoolean = new BooleanElements();
		this.eBooleanValue = new BooleanValueElements();
		this.pMathExp = new MathExpElements();
		this.pMultDivMathExp = new MultDivMathExpElements();
		this.pMathNumberExp = new MathNumberExpElements();
		this.pTextExp = new TextExpElements();
		this.pPrimary = new PrimaryElements();
		this.pFunctionUsage = new FunctionUsageElements();
		this.pTextLiteral = new TextLiteralElements();
		this.pVarUse = new VarUseElements();
		this.pTypeUsage = new TypeUsageElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.sdu.frhou18.mdsd.IF22".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    storyName = Story functions+=Function* scenarios+=Scenario+
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Function:
	//    'function' name=ID '(' (parameters+=TypeUsage (',' parameters+=TypeUsage)*)? ')' ':' type = Type
	//;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Story:
	//    'story' name=ID
	//;
	public StoryElements getStoryAccess() {
		return pStory;
	}
	
	public ParserRule getStoryRule() {
		return getStoryAccess().getRule();
	}
	
	//Scenario:
	//    'scenario' name=ID '{' variables+=VariableDef* statemens+=Statement* '}'
	//;
	public ScenarioElements getScenarioAccess() {
		return pScenario;
	}
	
	public ParserRule getScenarioRule() {
		return getScenarioAccess().getRule();
	}
	
	//Statement:
	//    End | Announce | Question
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//End:
	//    'end' name=ID endMessage=LogicExp
	//;
	public EndElements getEndAccess() {
		return pEnd;
	}
	
	public ParserRule getEndRule() {
		return getEndAccess().getRule();
	}
	
	//Announce:
	//    'announce' name=ID text=LogicExp target=Target
	//;
	public AnnounceElements getAnnounceAccess() {
		return pAnnounce;
	}
	
	public ParserRule getAnnounceRule() {
		return getAnnounceAccess().getRule();
	}
	
	//Question:
	//    'question' name=ID text=LogicExp 'as' asValue=LogicExp ('in' inVar=VarUse)? targets+=Target+
	//;
	public QuestionElements getQuestionAccess() {
		return pQuestion;
	}
	
	public ParserRule getQuestionRule() {
		return getQuestionAccess().getRule();
	}
	
	//VariableDef:
	//    'var' name=ID ':' type=Type
	//;
	public VariableDefElements getVariableDefAccess() {
		return pVariableDef;
	}
	
	public ParserRule getVariableDefRule() {
		return getVariableDefAccess().getRule();
	}
	
	//enum Type:
	//    boolean | text | number
	//;
	public TypeElements getTypeAccess() {
		return eType;
	}
	
	public EnumRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Target:
	//    'to' target=[TargetTarget] ('if' logic=LogicExp)?
	//;
	public TargetElements getTargetAccess() {
		return pTarget;
	}
	
	public ParserRule getTargetRule() {
		return getTargetAccess().getRule();
	}
	
	//TargetTarget:
	//    Scenario | Statement
	//;
	public TargetTargetElements getTargetTargetAccess() {
		return pTargetTarget;
	}
	
	public ParserRule getTargetTargetRule() {
		return getTargetTargetAccess().getRule();
	}
	
	//StringProducer:
	//    TextExp
	//;
	public StringProducerElements getStringProducerAccess() {
		return pStringProducer;
	}
	
	public ParserRule getStringProducerRule() {
		return getStringProducerAccess().getRule();
	}
	
	//This returns Expression:
	//    {This} 'this'
	//;
	public ThisElements getThisAccess() {
		return pThis;
	}
	
	public ParserRule getThisRule() {
		return getThisAccess().getRule();
	}
	
	//LogicExp returns Expression:
	//    LogicAndOR (('==' {Equals.left=current}| '!=' {NotEquals.left=current}| '<' {Less.left=current}| '>' {Greater.left=current}| '<=' {LessOrEquals.left=current}| '>='{GreaterOrEquals.left=current})  right=LogicAndOR)*
	//;
	public LogicExpElements getLogicExpAccess() {
		return pLogicExp;
	}
	
	public ParserRule getLogicExpRule() {
		return getLogicExpAccess().getRule();
	}
	
	//LogicAndOR returns Expression:
	//    MathExp (('&&' {And.left=current}|'||' {Or.left=current}) right=MathExp)*
	//;
	public LogicAndORElements getLogicAndORAccess() {
		return pLogicAndOR;
	}
	
	public ParserRule getLogicAndORRule() {
		return getLogicAndORAccess().getRule();
	}
	
	//LogicNot returns Expression:
	//    {LogicNot} '!' ref = Primary
	//;
	public LogicNotElements getLogicNotAccess() {
		return pLogicNot;
	}
	
	public ParserRule getLogicNotRule() {
		return getLogicNotAccess().getRule();
	}
	
	//Parentheses returns Expression:
	//    {Parentheses} '(' ref=LogicExp ')'
	//;
	public ParenthesesElements getParenthesesAccess() {
		return pParentheses;
	}
	
	public ParserRule getParenthesesRule() {
		return getParenthesesAccess().getRule();
	}
	
	//Boolean returns Expression:
	//     {Boolean} val=BooleanValue
	//;
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}
	
	//enum BooleanValue:
	//    TRUE='true' | FALSE='false'
	//;
	public BooleanValueElements getBooleanValueAccess() {
		return eBooleanValue;
	}
	
	public EnumRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}
	
	////Potentially no parenthesese in maths, java is gut boi
	//MathExp returns Expression:
	//    MultDivMathExp (('+' {Plus.left=current} | '-' {Minus.left=current}) right = MultDivMathExp)*
	//;
	public MathExpElements getMathExpAccess() {
		return pMathExp;
	}
	
	public ParserRule getMathExpRule() {
		return getMathExpAccess().getRule();
	}
	
	//MultDivMathExp returns Expression:
	//    TextExp (('*' {Multiplication.left=current}| '/' {Division.left=current}) right=TextExp)*
	//;
	public MultDivMathExpElements getMultDivMathExpAccess() {
		return pMultDivMathExp;
	}
	
	public ParserRule getMultDivMathExpRule() {
		return getMultDivMathExpAccess().getRule();
	}
	
	//MathNumberExp returns Expression:
	//    {MathNumberExp} value=INT
	//;
	public MathNumberExpElements getMathNumberExpAccess() {
		return pMathNumberExp;
	}
	
	public ParserRule getMathNumberExpRule() {
		return getMathNumberExpAccess().getRule();
	}
	
	//TextExp returns Expression:
	//    Primary (('&' {TextExp.left=current}) right=Primary)*//{TextExp} stringValues += Primary ('&' stringValues+=Primary)*
	//;
	public TextExpElements getTextExpAccess() {
		return pTextExp;
	}
	
	public ParserRule getTextExpRule() {
		return getTextExpAccess().getRule();
	}
	
	//Primary returns Expression:
	//    FunctionUsage | LogicNot | Boolean | Parentheses | This | MathNumberExp | TextLiteral | VarUse | TypeUsage
	//;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//FunctionUsage returns Expression:
	//    {FunctionUsage} name=[Function] '(' exps+=LogicExp (',' exps+=LogicExp)* ')'
	//;
	public FunctionUsageElements getFunctionUsageAccess() {
		return pFunctionUsage;
	}
	
	public ParserRule getFunctionUsageRule() {
		return getFunctionUsageAccess().getRule();
	}
	
	//TextLiteral returns Expression:
	//    {TextLiteral} text=STRING
	//;
	public TextLiteralElements getTextLiteralAccess() {
		return pTextLiteral;
	}
	
	public ParserRule getTextLiteralRule() {
		return getTextLiteralAccess().getRule();
	}
	
	//VarUse returns Expression:
	//    {VarUse} ref=[VariableDef]
	//;
	public VarUseElements getVarUseAccess() {
		return pVarUse;
	}
	
	public ParserRule getVarUseRule() {
		return getVarUseAccess().getRule();
	}
	
	//TypeUsage returns Expression:
	//    {TypeUsage} type=Type
	//;
	public TypeUsageElements getTypeUsageAccess() {
		return pTypeUsage;
	}
	
	public ParserRule getTypeUsageRule() {
		return getTypeUsageAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
