/**
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.tests;

import com.google.inject.Inject;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Extension;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(MathInjectorProvider.class)
@SuppressWarnings("all")
public class MathParsingTest {
  @Inject
  @Extension
  private /* ParseHelper<Variables> */Object _parseHelper;
  
  @Test
  public void loadModel() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe field MathParsingTest._parseHelper refers to the missing type Variables"
      + "\neResource cannot be resolved"
      + "\nerrors cannot be resolved"
      + "\nisEmpty cannot be resolved"
      + "\njoin cannot be resolved");
  }
  
  @Test
  public void number() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe field MathParsingTest._parseHelper refers to the missing type Variables"
      + "\ncompute cannot be resolved"
      + "\nget cannot be resolved");
  }
  
  @Test
  public void simpleAddition() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe field MathParsingTest._parseHelper refers to the missing type Variables"
      + "\ncompute cannot be resolved"
      + "\nget cannot be resolved");
  }
  
  @Test
  public void threeNumbersAddition() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe field MathParsingTest._parseHelper refers to the missing type Variables"
      + "\ncompute cannot be resolved"
      + "\nget cannot be resolved");
  }
  
  @Test
  public void subtraction() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe field MathParsingTest._parseHelper refers to the missing type Variables"
      + "\ncompute cannot be resolved"
      + "\nget cannot be resolved");
  }
  
  @Test
  public void subtractionNonCommutative() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe field MathParsingTest._parseHelper refers to the missing type Variables"
      + "\ncompute cannot be resolved"
      + "\nget cannot be resolved");
  }
  
  @Test
  public void threeNumbersSubtraction() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe field MathParsingTest._parseHelper refers to the missing type Variables"
      + "\ncompute cannot be resolved"
      + "\nget cannot be resolved");
  }
  
  @Test
  public void additionAndSubtraction() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe field MathParsingTest._parseHelper refers to the missing type Variables"
      + "\ncompute cannot be resolved"
      + "\nget cannot be resolved");
  }
  
  @Test
  public void multiplication() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe field MathParsingTest._parseHelper refers to the missing type Variables"
      + "\ncompute cannot be resolved"
      + "\nget cannot be resolved");
  }
  
  @Test
  public void threeNumbersMultiplication() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe field MathParsingTest._parseHelper refers to the missing type Variables"
      + "\ncompute cannot be resolved"
      + "\nget cannot be resolved");
  }
  
  @Test
  public void division() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe field MathParsingTest._parseHelper refers to the missing type Variables"
      + "\ncompute cannot be resolved"
      + "\nget cannot be resolved");
  }
  
  @Test
  public void divisionNonCommutative() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe field MathParsingTest._parseHelper refers to the missing type Variables"
      + "\ncompute cannot be resolved"
      + "\nget cannot be resolved");
  }
  
  @Test
  public void threeNumbersDivision() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe field MathParsingTest._parseHelper refers to the missing type Variables"
      + "\ncompute cannot be resolved"
      + "\nget cannot be resolved");
  }
  
  @Test
  public void multiplicationAndDivision() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe field MathParsingTest._parseHelper refers to the missing type Variables"
      + "\ncompute cannot be resolved"
      + "\nget cannot be resolved");
  }
  
  @Test
  public void multipleVariables() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe field MathParsingTest._parseHelper refers to the missing type Variables"
      + "\ncompute cannot be resolved"
      + "\nget cannot be resolved"
      + "\nget cannot be resolved"
      + "\nget cannot be resolved");
  }
  
  @Test
  public void parenthesis() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe field MathParsingTest._parseHelper refers to the missing type Variables"
      + "\ncompute cannot be resolved"
      + "\nget cannot be resolved");
  }
  
  @Test
  public void precedence() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe field MathParsingTest._parseHelper refers to the missing type Variables"
      + "\ncompute cannot be resolved"
      + "\nget cannot be resolved");
  }
  
  @Test
  public void letNumber() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe field MathParsingTest._parseHelper refers to the missing type Variables"
      + "\ncompute cannot be resolved"
      + "\nget cannot be resolved");
  }
  
  @Test
  public void letNumberExpression() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe field MathParsingTest._parseHelper refers to the missing type Variables"
      + "\ncompute cannot be resolved"
      + "\nget cannot be resolved");
  }
  
  @Test
  public void nestedLet() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe field MathParsingTest._parseHelper refers to the missing type Variables"
      + "\ncompute cannot be resolved"
      + "\nget cannot be resolved");
  }
  
  @Test
  public void letVariableShadowing() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe field MathParsingTest._parseHelper refers to the missing type Variables"
      + "\ncompute cannot be resolved"
      + "\nget cannot be resolved");
  }
  
  @Test
  public void referenceSingleVar() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe field MathParsingTest._parseHelper refers to the missing type Variables"
      + "\ncompute cannot be resolved"
      + "\nget cannot be resolved"
      + "\nget cannot be resolved");
  }
  
  @Test
  public void referenceExpressionVar() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe field MathParsingTest._parseHelper refers to the missing type Variables"
      + "\ncompute cannot be resolved"
      + "\nget cannot be resolved"
      + "\nget cannot be resolved");
  }
  
  @Test
  public void letUseGlobalVariableBody() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe field MathParsingTest._parseHelper refers to the missing type Variables"
      + "\ncompute cannot be resolved"
      + "\nget cannot be resolved");
  }
  
  @Test
  public void letUseGlobalVariableBinding() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe field MathParsingTest._parseHelper refers to the missing type Variables"
      + "\ncompute cannot be resolved"
      + "\nget cannot be resolved");
  }
  
  @Test
  public void letUseGlobalVariableShadowing() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe field MathParsingTest._parseHelper refers to the missing type Variables"
      + "\ncompute cannot be resolved"
      + "\nget cannot be resolved"
      + "\nget cannot be resolved");
  }
  
  @Test
  public void letUseGlobalVariableBindingSameName() {
    throw new Error("Unresolved compilation problems:"
      + "\nThe field MathParsingTest._parseHelper refers to the missing type Variables"
      + "\ncompute cannot be resolved"
      + "\nget cannot be resolved"
      + "\nget cannot be resolved");
  }
}
