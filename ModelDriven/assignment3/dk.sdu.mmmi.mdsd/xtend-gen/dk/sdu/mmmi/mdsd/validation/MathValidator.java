/**
 * generated by Xtext 2.26.0
 */
package dk.sdu.mmmi.mdsd.validation;

import com.google.common.base.Objects;
import dk.sdu.mmmi.mdsd.math.External;
import dk.sdu.mmmi.mdsd.math.ExternalUse;
import dk.sdu.mmmi.mdsd.math.MathPackage;
import dk.sdu.mmmi.mdsd.math.Program;
import dk.sdu.mmmi.mdsd.math.Variable;
import dk.sdu.mmmi.mdsd.math.VariableAssignment;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class MathValidator extends AbstractMathValidator {
  public static final String DUPLICATE_NAME = "duplicateName";
  
  @Check
  public void GlobalVarDuplicate(final VariableAssignment varAss) {
    Program base = EcoreUtil2.<Program>getContainerOfType(varAss, Program.class);
    final Function1<Variable, Boolean> _function = (Variable it) -> {
      return Boolean.valueOf(((it != varAss) && Objects.equal(it.getName(), varAss.getName())));
    };
    int _size = IterableExtensions.<Variable>toList(IterableExtensions.<Variable>filter(base.getVariableAssignments(), _function)).size();
    boolean _greaterThan = (_size > 0);
    if (_greaterThan) {
      InputOutput.<String>println("Should have err");
      this.error("Global variables cannot be assigned with the same name", MathPackage.Literals.VARIABLE__NAME, MathValidator.DUPLICATE_NAME);
    }
  }
  
  public static final String WRONG_PARAMETER_COUNT = "wrongParamaterCount";
  
  @Check
  public void ValidateExternalParameterCount(final ExternalUse use) {
    External parent = use.getRef();
    int _length = ((Object[])Conversions.unwrapArray(parent.getParameters(), Object.class)).length;
    int _length_1 = ((Object[])Conversions.unwrapArray(use.getExp(), Object.class)).length;
    boolean _tripleNotEquals = (_length != _length_1);
    if (_tripleNotEquals) {
      this.error("Call to external function with incorrect number of parameters", MathPackage.Literals.EXTERNAL_USE__EXP, MathValidator.WRONG_PARAMETER_COUNT);
    }
  }
}
