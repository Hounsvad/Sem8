/**
 * generated by Xtext 2.26.0
 */
package dk.sdu.mmmi.mdsd.scoping;

import dk.sdu.mmmi.mdsd.math.Assignment;
import dk.sdu.mmmi.mdsd.math.Local;
import dk.sdu.mmmi.mdsd.math.VarUse;
import dk.sdu.mmmi.mdsd.math.Variable;
import dk.sdu.mmmi.mdsd.math.VariableAssignment;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class MathScopeProvider extends AbstractMathScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    IScope scope = super.getScope(context, reference);
    if ((context instanceof VarUse)) {
      IScope returnScope = null;
      Local letDefinition = EcoreUtil2.<Local>getContainerOfType(context, Local.class);
      Assignment letVariable = EcoreUtil2.<Assignment>getContainerOfType(context, Assignment.class);
      if (((letDefinition != null) && (letVariable != letDefinition.getAssignment()))) {
        returnScope = this.addLetDefinition(letDefinition, context);
      } else {
        if ((letDefinition != null)) {
          letDefinition = EcoreUtil2.<Local>getContainerOfType(letDefinition.eContainer(), Local.class);
        }
        if ((letDefinition != null)) {
          returnScope = this.addLetDefinition(letDefinition, context);
        } else {
          returnScope = this.getVariableAssignmentsInScope(context);
        }
      }
      return returnScope;
    }
    return scope;
  }
  
  protected IScope addLetDefinition(final Local letDefinition, final EObject context) {
    final Local containingLet = EcoreUtil2.<Local>getContainerOfType(letDefinition.eContainer(), Local.class);
    if ((containingLet == null)) {
      Variable _assignment = letDefinition.getAssignment();
      return Scopes.scopeFor(Collections.<EObject>unmodifiableList(CollectionLiterals.<EObject>newArrayList(_assignment)), this.getVariableAssignmentsInScope(context));
    } else {
      Variable _assignment_1 = letDefinition.getAssignment();
      return Scopes.scopeFor(Collections.<EObject>unmodifiableList(CollectionLiterals.<EObject>newArrayList(_assignment_1)), this.addLetDefinition(containingLet, context));
    }
  }
  
  protected IScope getVariableAssignmentsInScope(final EObject context) {
    final EObject root = EcoreUtil2.getRootContainer(context);
    final List<EObject> candidates = new ArrayList<EObject>();
    List<VariableAssignment> _allContentsOfType = EcoreUtil2.<VariableAssignment>getAllContentsOfType(root, VariableAssignment.class);
    for (final VariableAssignment assignment : _allContentsOfType) {
      candidates.add(((EObject) assignment));
    }
    final Function1<EObject, Boolean> _function = (EObject variable) -> {
      Variable _containerOfType = EcoreUtil2.<Variable>getContainerOfType(context, Variable.class);
      return Boolean.valueOf((variable != _containerOfType));
    };
    final List<EObject> variableAssignments = IterableExtensions.<EObject>toList(IterableExtensions.<EObject>filter(candidates, _function));
    return Scopes.scopeFor(variableAssignments);
  }
}
