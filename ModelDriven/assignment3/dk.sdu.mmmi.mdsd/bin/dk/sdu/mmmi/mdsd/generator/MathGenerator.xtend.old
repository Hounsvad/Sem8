/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.generator

import dk.sdu.mmmi.mdsd.math.Division
import dk.sdu.mmmi.mdsd.math.ExplicitNumber
import dk.sdu.mmmi.mdsd.math.Expression
import dk.sdu.mmmi.mdsd.math.Minus
import dk.sdu.mmmi.mdsd.math.Multiplication
import dk.sdu.mmmi.mdsd.math.Parenthesis
import dk.sdu.mmmi.mdsd.math.Plus
import dk.sdu.mmmi.mdsd.math.VarUse
import dk.sdu.mmmi.mdsd.math.Variable
import dk.sdu.mmmi.mdsd.math.Variables
import java.util.HashMap
import java.util.Map
import javax.swing.JOptionPane
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import dk.sdu.mmmi.mdsd.math.VariableAssignment
import dk.sdu.mmmi.mdsd.math.Local

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MathGenerator extends AbstractGenerator {

	static Map<String, Integer> variables = new HashMap();
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val lines = resource.allContents.filter(Variables).next
		val result = lines.compute
		
		result.displayPanel
	}
	
	def static Map<String, Integer> compute(Variables math){
		var values = new HashMap<String, Integer>
		for (varass : math.getVariableAssignments()) {
			values.put(varass.getName(), ComputeExp(varass))
		}
		return values
	}

	//Plus
	def static dispatch Integer ComputeExp(Plus exp) {
		return exp.left.ComputeExp() + exp.right.ComputeExp()
	}
	//Minus
	def static dispatch Integer ComputeExp(Minus exp) {
		return exp.left.ComputeExp() - exp.right.ComputeExp()
	}
	//Multiplication
	def static dispatch Integer ComputeExp(Multiplication exp) {
		return exp.left.ComputeExp() * exp.right.ComputeExp()
	}
	//Division
	def static dispatch Integer ComputeExp(Division exp) {
		return exp.left.ComputeExp() / exp.right.ComputeExp()
	}
	//ExplicitNumber
	def static dispatch Integer ComputeExp(ExplicitNumber exp) {
		return exp.value
	}
	//Parenthesis
	def static dispatch Integer ComputeExp(Parenthesis exp) {
		return exp.getExp.ComputeExp()
	}
	//VarUse
	def static dispatch Integer ComputeExp(VarUse exp) {
		return exp.ref.ComputeExp()
	}
	//Let
	def static dispatch Integer ComputeExp(Local exp) { //Let
		return exp.exp.ComputeExp()
	}
	//Variable
	def static dispatch Integer ComputeExp(Variable exp) {
		return exp.exp.ComputeExp()
	}	
	
	def void displayPanel(Map<String, Integer> result) {
		var resultString = ""
		for (entry : result.entrySet()) {
         	resultString += "var " + entry.getKey() + " = " + entry.getValue() + "\n"
        }
		
		JOptionPane.showMessageDialog(null, resultString ,"Math Language", JOptionPane.INFORMATION_MESSAGE)
	}
}
